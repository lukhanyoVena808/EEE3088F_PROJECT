
fn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003624  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003734  08003734  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  08003734  08003734  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003734  08003734  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800373c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000e8  08003824  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003824  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6a8  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ce  00000000  00000000  0002b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002d920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f84  00000000  00000000  0002e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c639  00000000  00000000  000401a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c642  00000000  00000000  0004c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8e1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002218  00000000  00000000  000b8e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e8 	.word	0x200000e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036cc 	.word	0x080036cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ec 	.word	0x200000ec
 8000104:	080036cc 	.word	0x080036cc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <debugPrintln>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debugPrintln(UART_HandleTypeDef *uart_handle, char _out[])
{ HAL_UART_Transmit(uart_handle, (uint8_t *) _out, strlen(_out), 60);
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	0018      	movs	r0, r3
 800023e:	f7ff ff63 	bl	8000108 <strlen>
 8000242:	0003      	movs	r3, r0
 8000244:	b29a      	uxth	r2, r3
 8000246:	6839      	ldr	r1, [r7, #0]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	233c      	movs	r3, #60	; 0x3c
 800024c:	f002 fe68 	bl	8002f20 <HAL_UART_Transmit>
char newline[2] = "\r\n"; HAL_UART_Transmit(uart_handle, (uint8_t *) newline, 2, 10);
 8000250:	210c      	movs	r1, #12
 8000252:	187b      	adds	r3, r7, r1
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <debugPrintln+0x3c>)
 8000256:	801a      	strh	r2, [r3, #0]
 8000258:	1879      	adds	r1, r7, r1
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	230a      	movs	r3, #10
 800025e:	2202      	movs	r2, #2
 8000260:	f002 fe5e 	bl	8002f20 <HAL_UART_Transmit>
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	00000a0d 	.word	0x00000a0d

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fc05 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f8ef 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fa09 	bl	8000694 <MX_GPIO_Init>
  MX_ADC_Init();
 8000282:	f000 f93b 	bl	80004fc <MX_ADC_Init>
  MX_I2C2_Init();
 8000286:	f000 f995 	bl	80005b4 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800028a:	f000 f9d3 	bl	8000634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDR,0,2,toWrite1,sizeof(toWrite1),1000);
 800028e:	4865      	ldr	r0, [pc, #404]	; (8000424 <main+0x1b4>)
 8000290:	23fa      	movs	r3, #250	; 0xfa
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	9302      	str	r3, [sp, #8]
 8000296:	232a      	movs	r3, #42	; 0x2a
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	4b63      	ldr	r3, [pc, #396]	; (8000428 <main+0x1b8>)
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2302      	movs	r3, #2
 80002a0:	2200      	movs	r2, #0
 80002a2:	21a0      	movs	r1, #160	; 0xa0
 80002a4:	f001 fc30 	bl	8001b08 <HAL_I2C_Mem_Write>
  HAL_Delay(50);
 80002a8:	2032      	movs	r0, #50	; 0x32
 80002aa:	f000 fc4f 	bl	8000b4c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDR,16,2,toWrite2,sizeof(toWrite2),1000);
 80002ae:	485d      	ldr	r0, [pc, #372]	; (8000424 <main+0x1b4>)
 80002b0:	23fa      	movs	r3, #250	; 0xfa
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	9302      	str	r3, [sp, #8]
 80002b6:	232a      	movs	r3, #42	; 0x2a
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	4b5c      	ldr	r3, [pc, #368]	; (800042c <main+0x1bc>)
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2302      	movs	r3, #2
 80002c0:	2210      	movs	r2, #16
 80002c2:	21a0      	movs	r1, #160	; 0xa0
 80002c4:	f001 fc20 	bl	8001b08 <HAL_I2C_Mem_Write>
  HAL_Delay(50);
 80002c8:	2032      	movs	r0, #50	; 0x32
 80002ca:	f000 fc3f 	bl	8000b4c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDR,32,2,toWrite3,sizeof(toWrite3),1000);
 80002ce:	4855      	ldr	r0, [pc, #340]	; (8000424 <main+0x1b4>)
 80002d0:	23fa      	movs	r3, #250	; 0xfa
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	9302      	str	r3, [sp, #8]
 80002d6:	232a      	movs	r3, #42	; 0x2a
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	4b55      	ldr	r3, [pc, #340]	; (8000430 <main+0x1c0>)
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2302      	movs	r3, #2
 80002e0:	2220      	movs	r2, #32
 80002e2:	21a0      	movs	r1, #160	; 0xa0
 80002e4:	f001 fc10 	bl	8001b08 <HAL_I2C_Mem_Write>
  HAL_Delay(50);
 80002e8:	2032      	movs	r0, #50	; 0x32
 80002ea:	f000 fc2f 	bl	8000b4c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDR,48,2,toWrite4,sizeof(toWrite4),1000);
 80002ee:	484d      	ldr	r0, [pc, #308]	; (8000424 <main+0x1b4>)
 80002f0:	23fa      	movs	r3, #250	; 0xfa
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	232a      	movs	r3, #42	; 0x2a
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	4b4e      	ldr	r3, [pc, #312]	; (8000434 <main+0x1c4>)
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	2302      	movs	r3, #2
 8000300:	2230      	movs	r2, #48	; 0x30
 8000302:	21a0      	movs	r1, #160	; 0xa0
 8000304:	f001 fc00 	bl	8001b08 <HAL_I2C_Mem_Write>
  HAL_Delay(50);
 8000308:	2032      	movs	r0, #50	; 0x32
 800030a:	f000 fc1f 	bl	8000b4c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDR,64,2,toWrite5,sizeof(toWrite5),1000);
 800030e:	4845      	ldr	r0, [pc, #276]	; (8000424 <main+0x1b4>)
 8000310:	23fa      	movs	r3, #250	; 0xfa
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	232a      	movs	r3, #42	; 0x2a
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	4b47      	ldr	r3, [pc, #284]	; (8000438 <main+0x1c8>)
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2302      	movs	r3, #2
 8000320:	2240      	movs	r2, #64	; 0x40
 8000322:	21a0      	movs	r1, #160	; 0xa0
 8000324:	f001 fbf0 	bl	8001b08 <HAL_I2C_Mem_Write>
  HAL_Delay(50);
 8000328:	2032      	movs	r0, #50	; 0x32
 800032a:	f000 fc0f 	bl	8000b4c <HAL_Delay>


  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR,0,2,toRead1,sizeof(toRead1),1000);
 800032e:	483d      	ldr	r0, [pc, #244]	; (8000424 <main+0x1b4>)
 8000330:	23fa      	movs	r3, #250	; 0xfa
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	9302      	str	r3, [sp, #8]
 8000336:	2310      	movs	r3, #16
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4b40      	ldr	r3, [pc, #256]	; (800043c <main+0x1cc>)
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2302      	movs	r3, #2
 8000340:	2200      	movs	r2, #0
 8000342:	21a0      	movs	r1, #160	; 0xa0
 8000344:	f001 fd0e 	bl	8001d64 <HAL_I2C_Mem_Read>
  HAL_Delay(50);
 8000348:	2032      	movs	r0, #50	; 0x32
 800034a:	f000 fbff 	bl	8000b4c <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR,16,2,toRead2,sizeof(toRead2),1000);
 800034e:	4835      	ldr	r0, [pc, #212]	; (8000424 <main+0x1b4>)
 8000350:	23fa      	movs	r3, #250	; 0xfa
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	9302      	str	r3, [sp, #8]
 8000356:	2310      	movs	r3, #16
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4b39      	ldr	r3, [pc, #228]	; (8000440 <main+0x1d0>)
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2302      	movs	r3, #2
 8000360:	2210      	movs	r2, #16
 8000362:	21a0      	movs	r1, #160	; 0xa0
 8000364:	f001 fcfe 	bl	8001d64 <HAL_I2C_Mem_Read>
  HAL_Delay(50);
 8000368:	2032      	movs	r0, #50	; 0x32
 800036a:	f000 fbef 	bl	8000b4c <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR,32,2,toRead3,sizeof(toRead3),1000);
 800036e:	482d      	ldr	r0, [pc, #180]	; (8000424 <main+0x1b4>)
 8000370:	23fa      	movs	r3, #250	; 0xfa
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	9302      	str	r3, [sp, #8]
 8000376:	2310      	movs	r3, #16
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4b32      	ldr	r3, [pc, #200]	; (8000444 <main+0x1d4>)
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2302      	movs	r3, #2
 8000380:	2220      	movs	r2, #32
 8000382:	21a0      	movs	r1, #160	; 0xa0
 8000384:	f001 fcee 	bl	8001d64 <HAL_I2C_Mem_Read>
  HAL_Delay(50);
 8000388:	2032      	movs	r0, #50	; 0x32
 800038a:	f000 fbdf 	bl	8000b4c <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR,48,2,toRead4,sizeof(toRead4),1000);
 800038e:	4825      	ldr	r0, [pc, #148]	; (8000424 <main+0x1b4>)
 8000390:	23fa      	movs	r3, #250	; 0xfa
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	9302      	str	r3, [sp, #8]
 8000396:	2310      	movs	r3, #16
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <main+0x1d8>)
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2302      	movs	r3, #2
 80003a0:	2230      	movs	r2, #48	; 0x30
 80003a2:	21a0      	movs	r1, #160	; 0xa0
 80003a4:	f001 fcde 	bl	8001d64 <HAL_I2C_Mem_Read>
  HAL_Delay(50);
 80003a8:	2032      	movs	r0, #50	; 0x32
 80003aa:	f000 fbcf 	bl	8000b4c <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR,64,2,toRead5,sizeof(toRead5),1000);
 80003ae:	481d      	ldr	r0, [pc, #116]	; (8000424 <main+0x1b4>)
 80003b0:	23fa      	movs	r3, #250	; 0xfa
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	9302      	str	r3, [sp, #8]
 80003b6:	2310      	movs	r3, #16
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	4b24      	ldr	r3, [pc, #144]	; (800044c <main+0x1dc>)
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2302      	movs	r3, #2
 80003c0:	2240      	movs	r2, #64	; 0x40
 80003c2:	21a0      	movs	r1, #160	; 0xa0
 80003c4:	f001 fcce 	bl	8001d64 <HAL_I2C_Mem_Read>
  HAL_Delay(50);
 80003c8:	2032      	movs	r0, #50	; 0x32
 80003ca:	f000 fbbf 	bl	8000b4c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);  HAL_Delay(500);
 80003ce:	2380      	movs	r3, #128	; 0x80
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	4a1f      	ldr	r2, [pc, #124]	; (8000450 <main+0x1e0>)
 80003d4:	0019      	movs	r1, r3
 80003d6:	0010      	movs	r0, r2
 80003d8:	f001 fae5 	bl	80019a6 <HAL_GPIO_TogglePin>
 80003dc:	23fa      	movs	r3, #250	; 0xfa
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 fbb3 	bl	8000b4c <HAL_Delay>
	  int analog_value;
	  HAL_ADC_Start(&hadc);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <main+0x1e4>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 fd13 	bl	8000e14 <HAL_ADC_Start>
	  	 	  if (HAL_ADC_PollForConversion(&hadc, 10) == HAL_OK){
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <main+0x1e4>)
 80003f0:	210a      	movs	r1, #10
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 fda2 	bl	8000f3c <HAL_ADC_PollForConversion>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d105      	bne.n	8000408 <main+0x198>
	  	 		  analog_value = HAL_ADC_GetValue(&hadc);
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <main+0x1e4>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fe34 	bl	800106c <HAL_ADC_GetValue>
 8000404:	0003      	movs	r3, r0
 8000406:	607b      	str	r3, [r7, #4]
	  	 	  }
	  	 	  HAL_ADC_Stop(&hadc);
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <main+0x1e4>)
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fd56 	bl	8000ebc <HAL_ADC_Stop>
	  	 	  HAL_Delay(50);
 8000410:	2032      	movs	r0, #50	; 0x32
 8000412:	f000 fb9b 	bl	8000b4c <HAL_Delay>
	  	 	debugPrintln("The LDR value is: %d",analog_value);
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <main+0x1e8>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f7ff ff07 	bl	8000230 <debugPrintln>
  {
 8000422:	e7d4      	b.n	80003ce <main+0x15e>
 8000424:	20000144 	.word	0x20000144
 8000428:	20000000 	.word	0x20000000
 800042c:	2000002c 	.word	0x2000002c
 8000430:	20000058 	.word	0x20000058
 8000434:	20000084 	.word	0x20000084
 8000438:	200000b0 	.word	0x200000b0
 800043c:	20000214 	.word	0x20000214
 8000440:	20000224 	.word	0x20000224
 8000444:	20000234 	.word	0x20000234
 8000448:	20000244 	.word	0x20000244
 800044c:	20000254 	.word	0x20000254
 8000450:	48000800 	.word	0x48000800
 8000454:	20000104 	.word	0x20000104
 8000458:	080036e4 	.word	0x080036e4

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b091      	sub	sp, #68	; 0x44
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	2410      	movs	r4, #16
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2330      	movs	r3, #48	; 0x30
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f003 f925 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000472:	003b      	movs	r3, r7
 8000474:	0018      	movs	r0, r3
 8000476:	2310      	movs	r3, #16
 8000478:	001a      	movs	r2, r3
 800047a:	2100      	movs	r1, #0
 800047c:	f003 f91e 	bl	80036bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000480:	0021      	movs	r1, r4
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2212      	movs	r2, #18
 8000486:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2201      	movs	r2, #1
 800048c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2201      	movs	r2, #1
 8000492:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2210      	movs	r2, #16
 8000498:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2210      	movs	r2, #16
 800049e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2202      	movs	r2, #2
 80004a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	22a0      	movs	r2, #160	; 0xa0
 80004b0:	0392      	lsls	r2, r2, #14
 80004b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 f86f 	bl	80025a0 <HAL_RCC_OscConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f98d 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	003b      	movs	r3, r7
 80004cc:	2207      	movs	r2, #7
 80004ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2202      	movs	r2, #2
 80004d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d6:	003b      	movs	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004dc:	003b      	movs	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004e2:	003b      	movs	r3, r7
 80004e4:	2101      	movs	r1, #1
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fb74 	bl	8002bd4 <HAL_RCC_ClockConfig>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004f0:	f000 f978 	bl	80007e4 <Error_Handler>
  }
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b011      	add	sp, #68	; 0x44
 80004fa:	bd90      	pop	{r4, r7, pc}

080004fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	0018      	movs	r0, r3
 8000506:	230c      	movs	r3, #12
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f003 f8d6 	bl	80036bc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_ADC_Init+0xb0>)
 8000512:	4a27      	ldr	r2, [pc, #156]	; (80005b0 <MX_ADC_Init+0xb4>)
 8000514:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000516:	4b25      	ldr	r3, [pc, #148]	; (80005ac <MX_ADC_Init+0xb0>)
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_ADC_Init+0xb0>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000522:	4b22      	ldr	r3, [pc, #136]	; (80005ac <MX_ADC_Init+0xb0>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_ADC_Init+0xb0>)
 800052a:	2201      	movs	r2, #1
 800052c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052e:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <MX_ADC_Init+0xb0>)
 8000530:	2204      	movs	r2, #4
 8000532:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <MX_ADC_Init+0xb0>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_ADC_Init+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_ADC_Init+0xb0>)
 8000542:	2200      	movs	r2, #0
 8000544:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_ADC_Init+0xb0>)
 8000548:	2200      	movs	r2, #0
 800054a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_ADC_Init+0xb0>)
 800054e:	22c2      	movs	r2, #194	; 0xc2
 8000550:	32ff      	adds	r2, #255	; 0xff
 8000552:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_ADC_Init+0xb0>)
 8000556:	2200      	movs	r2, #0
 8000558:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_ADC_Init+0xb0>)
 800055c:	2224      	movs	r2, #36	; 0x24
 800055e:	2100      	movs	r1, #0
 8000560:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_ADC_Init+0xb0>)
 8000564:	2201      	movs	r2, #1
 8000566:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_ADC_Init+0xb0>)
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fb12 	bl	8000b94 <HAL_ADC_Init>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000574:	f000 f936 	bl	80007e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	220a      	movs	r2, #10
 800057c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	0152      	lsls	r2, r2, #5
 8000584:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	0552      	lsls	r2, r2, #21
 800058c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800058e:	1d3a      	adds	r2, r7, #4
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_ADC_Init+0xb0>)
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fd75 	bl	8001084 <HAL_ADC_ConfigChannel>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800059e:	f000 f921 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b004      	add	sp, #16
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000104 	.word	0x20000104
 80005b0:	40012400 	.word	0x40012400

080005b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_I2C2_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_I2C2_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_I2C2_Init+0x74>)
 80005c0:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <MX_I2C2_Init+0x7c>)
 80005c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_I2C2_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_I2C2_Init+0x74>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_I2C2_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_I2C2_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C2_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C2_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C2_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C2_Init+0x74>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f9f3 	bl	80019dc <HAL_I2C_Init>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005fa:	f000 f8f3 	bl	80007e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C2_Init+0x74>)
 8000600:	2100      	movs	r1, #0
 8000602:	0018      	movs	r0, r3
 8000604:	f001 ff34 	bl	8002470 <HAL_I2CEx_ConfigAnalogFilter>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800060c:	f000 f8ea 	bl	80007e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_I2C2_Init+0x74>)
 8000612:	2100      	movs	r1, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f001 ff77 	bl	8002508 <HAL_I2CEx_ConfigDigitalFilter>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 f8e1 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000144 	.word	0x20000144
 800062c:	40005800 	.word	0x40005800
 8000630:	20303e5d 	.word	0x20303e5d

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_USART2_UART_Init+0x58>)
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <MX_USART2_UART_Init+0x5c>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000640:	2296      	movs	r2, #150	; 0x96
 8000642:	0192      	lsls	r2, r2, #6
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_USART2_UART_Init+0x58>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_USART2_UART_Init+0x58>)
 8000678:	0018      	movs	r0, r3
 800067a:	f002 fbfd 	bl	8002e78 <HAL_UART_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000682:	f000 f8af 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000190 	.word	0x20000190
 8000690:	40004400 	.word	0x40004400

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	240c      	movs	r4, #12
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2314      	movs	r3, #20
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 f809 	bl	80036bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b4b      	ldr	r3, [pc, #300]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006ac:	695a      	ldr	r2, [r3, #20]
 80006ae:	4b4a      	ldr	r3, [pc, #296]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0309      	lsls	r1, r1, #12
 80006b4:	430a      	orrs	r2, r1
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	4b47      	ldr	r3, [pc, #284]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	031b      	lsls	r3, r3, #12
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	4b43      	ldr	r3, [pc, #268]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	0289      	lsls	r1, r1, #10
 80006d0:	430a      	orrs	r2, r1
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	4b40      	ldr	r3, [pc, #256]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006d6:	695a      	ldr	r2, [r3, #20]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	029b      	lsls	r3, r3, #10
 80006dc:	4013      	ands	r3, r2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006e4:	695a      	ldr	r2, [r3, #20]
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	02c9      	lsls	r1, r1, #11
 80006ec:	430a      	orrs	r2, r1
 80006ee:	615a      	str	r2, [r3, #20]
 80006f0:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <MX_GPIO_Init+0x144>)
 80006f2:	695a      	ldr	r2, [r3, #20]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	02db      	lsls	r3, r3, #11
 80006f8:	4013      	ands	r3, r2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006fe:	23c0      	movs	r3, #192	; 0xc0
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4836      	ldr	r0, [pc, #216]	; (80007dc <MX_GPIO_Init+0x148>)
 8000704:	2200      	movs	r2, #0
 8000706:	0019      	movs	r1, r3
 8000708:	f001 f930 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2290      	movs	r2, #144	; 0x90
 8000716:	0352      	lsls	r2, r2, #13
 8000718:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000720:	193a      	adds	r2, r7, r4
 8000722:	2390      	movs	r3, #144	; 0x90
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 ffaf 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2220      	movs	r2, #32
 8000732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2202      	movs	r2, #2
 8000738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2202      	movs	r2, #2
 800074a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	193a      	adds	r2, r7, r4
 800074e:	2390      	movs	r3, #144	; 0x90
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 ff99 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800075a:	0021      	movs	r1, r4
 800075c:	187b      	adds	r3, r7, r1
 800075e:	22c0      	movs	r2, #192	; 0xc0
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	000c      	movs	r4, r1
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000778:	193b      	adds	r3, r7, r4
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_GPIO_Init+0x148>)
 800077c:	0019      	movs	r1, r3
 800077e:	0010      	movs	r0, r2
 8000780:	f000 ff84 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2220      	movs	r2, #32
 8000788:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	193b      	adds	r3, r7, r4
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x14c>)
 800079a:	0019      	movs	r1, r3
 800079c:	0010      	movs	r0, r2
 800079e:	f000 ff75 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007a2:	0021      	movs	r1, r4
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	22c0      	movs	r2, #192	; 0xc0
 80007a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2212      	movs	r2, #18
 80007ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2203      	movs	r2, #3
 80007ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2201      	movs	r2, #1
 80007c0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x14c>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f000 ff5f 	bl	800168c <HAL_GPIO_Init>

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b009      	add	sp, #36	; 0x24
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000800 	.word	0x48000800
 80007e0:	48000400 	.word	0x48000400

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x44>)
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_MspInit+0x44>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	619a      	str	r2, [r3, #24]
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x44>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x44>)
 8000810:	69da      	ldr	r2, [r3, #28]
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_MspInit+0x44>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0549      	lsls	r1, r1, #21
 8000818:	430a      	orrs	r2, r1
 800081a:	61da      	str	r2, [r3, #28]
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_MspInit+0x44>)
 800081e:	69da      	ldr	r2, [r3, #28]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	055b      	lsls	r3, r3, #21
 8000824:	4013      	ands	r3, r2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08b      	sub	sp, #44	; 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	2414      	movs	r4, #20
 8000842:	193b      	adds	r3, r7, r4
 8000844:	0018      	movs	r0, r3
 8000846:	2314      	movs	r3, #20
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f002 ff36 	bl	80036bc <memset>
  if(hadc->Instance==ADC1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <HAL_ADC_MspInit+0x80>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d12a      	bne.n	80008b0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_ADC_MspInit+0x84>)
 800085c:	699a      	ldr	r2, [r3, #24]
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0089      	lsls	r1, r1, #2
 8000864:	430a      	orrs	r2, r1
 8000866:	619a      	str	r2, [r3, #24]
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_ADC_MspInit+0x84>)
 800086a:	699a      	ldr	r2, [r3, #24]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_ADC_MspInit+0x84>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0309      	lsls	r1, r1, #12
 8000880:	430a      	orrs	r2, r1
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000886:	695a      	ldr	r2, [r3, #20]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	031b      	lsls	r3, r3, #12
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2203      	movs	r2, #3
 800089c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_ADC_MspInit+0x88>)
 80008a8:	0019      	movs	r1, r3
 80008aa:	0010      	movs	r0, r2
 80008ac:	f000 feee 	bl	800168c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00b      	add	sp, #44	; 0x2c
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40012400 	.word	0x40012400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800

080008c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b08b      	sub	sp, #44	; 0x2c
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	2414      	movs	r4, #20
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2314      	movs	r3, #20
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 fef0 	bl	80036bc <memset>
  if(hi2c->Instance==I2C2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <HAL_I2C_MspInit+0x90>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d132      	bne.n	800094c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <HAL_I2C_MspInit+0x94>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_I2C_MspInit+0x94>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	02c9      	lsls	r1, r1, #11
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_I2C_MspInit+0x94>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	02db      	lsls	r3, r3, #11
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	22c0      	movs	r2, #192	; 0xc0
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090a:	0021      	movs	r1, r4
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2212      	movs	r2, #18
 8000910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2203      	movs	r2, #3
 800091c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2201      	movs	r2, #1
 8000922:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	187b      	adds	r3, r7, r1
 8000926:	4a0d      	ldr	r2, [pc, #52]	; (800095c <HAL_I2C_MspInit+0x98>)
 8000928:	0019      	movs	r1, r3
 800092a:	0010      	movs	r0, r2
 800092c:	f000 feae 	bl	800168c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_I2C_MspInit+0x94>)
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_I2C_MspInit+0x94>)
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	03c9      	lsls	r1, r1, #15
 800093a:	430a      	orrs	r2, r1
 800093c:	61da      	str	r2, [r3, #28]
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_I2C_MspInit+0x94>)
 8000940:	69da      	ldr	r2, [r3, #28]
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	03db      	lsls	r3, r3, #15
 8000946:	4013      	ands	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b00b      	add	sp, #44	; 0x2c
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	40005800 	.word	0x40005800
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	2414      	movs	r4, #20
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	2314      	movs	r3, #20
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f002 fea2 	bl	80036bc <memset>
  if(huart->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <HAL_UART_MspInit+0x90>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d132      	bne.n	80009e8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_UART_MspInit+0x94>)
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_UART_MspInit+0x94>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0289      	lsls	r1, r1, #10
 800098c:	430a      	orrs	r2, r1
 800098e:	61da      	str	r2, [r3, #28]
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x94>)
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	029b      	lsls	r3, r3, #10
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x94>)
 80009a0:	695a      	ldr	r2, [r3, #20]
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_UART_MspInit+0x94>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0289      	lsls	r1, r1, #10
 80009a8:	430a      	orrs	r2, r1
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x94>)
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	029b      	lsls	r3, r3, #10
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ba:	0021      	movs	r1, r4
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2202      	movs	r2, #2
 80009c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2203      	movs	r2, #3
 80009d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2201      	movs	r2, #1
 80009d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	187a      	adds	r2, r7, r1
 80009dc:	2390      	movs	r3, #144	; 0x90
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fe52 	bl	800168c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b00b      	add	sp, #44	; 0x2c
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f87a 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a5a:	f7ff ffe4 	bl	8000a26 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f002 fe09 	bl	8003674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff fc05 	bl	8000270 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000a74:	0800373c 	.word	0x0800373c
  ldr r2, =_sbss
 8000a78:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000a7c:	20000268 	.word	0x20000268

08000a80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_COMP_IRQHandler>
	...

08000a84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_Init+0x24>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_Init+0x24>)
 8000a8e:	2110      	movs	r1, #16
 8000a90:	430a      	orrs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f809 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9a:	f7ff fea9 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_InitTick+0x5c>)
 8000ab6:	681c      	ldr	r4, [r3, #0]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_InitTick+0x60>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0019      	movs	r1, r3
 8000abe:	23fa      	movs	r3, #250	; 0xfa
 8000ac0:	0098      	lsls	r0, r3, #2
 8000ac2:	f7ff fb29 	bl	8000118 <__udivsi3>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0020      	movs	r0, r4
 8000acc:	f7ff fb24 	bl	8000118 <__udivsi3>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 fdcd 	bl	8001672 <HAL_SYSTICK_Config>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e00f      	b.n	8000b00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d80b      	bhi.n	8000afe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425b      	negs	r3, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fdaa 	bl	8001648 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_InitTick+0x64>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b003      	add	sp, #12
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	200000dc 	.word	0x200000dc
 8000b0c:	200000e4 	.word	0x200000e4
 8000b10:	200000e0 	.word	0x200000e0

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	18d2      	adds	r2, r2, r3
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_IncTick+0x20>)
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	200000e4 	.word	0x200000e4
 8000b34:	20000264 	.word	0x20000264

08000b38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000264 	.word	0x20000264

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff fff0 	bl	8000b38 <HAL_GetTick>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	f7ff ffe0 	bl	8000b38 <HAL_GetTick>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	200000e4 	.word	0x200000e4

08000b94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e125      	b.n	8000dfe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10a      	bne.n	8000bd0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2234      	movs	r2, #52	; 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fe34 	bl	8000838 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd4:	2210      	movs	r2, #16
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d000      	beq.n	8000bdc <HAL_ADC_Init+0x48>
 8000bda:	e103      	b.n	8000de4 <HAL_ADC_Init+0x250>
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d000      	beq.n	8000be8 <HAL_ADC_Init+0x54>
 8000be6:	e0fd      	b.n	8000de4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2204      	movs	r2, #4
 8000bf0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000bf2:	d000      	beq.n	8000bf6 <HAL_ADC_Init+0x62>
 8000bf4:	e0f6      	b.n	8000de4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfa:	4a83      	ldr	r2, [pc, #524]	; (8000e08 <HAL_ADC_Init+0x274>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2202      	movs	r2, #2
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d112      	bne.n	8000c3a <HAL_ADC_Init+0xa6>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d009      	beq.n	8000c36 <HAL_ADC_Init+0xa2>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d101      	bne.n	8000c3a <HAL_ADC_Init+0xa6>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <HAL_ADC_Init+0xa8>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d116      	bne.n	8000c6e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	2218      	movs	r2, #24
 8000c48:	4393      	bics	r3, r2
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	0899      	lsrs	r1, r3, #2
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4964      	ldr	r1, [pc, #400]	; (8000e0c <HAL_ADC_Init+0x278>)
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7e1b      	ldrb	r3, [r3, #24]
 8000c82:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7e5b      	ldrb	r3, [r3, #25]
 8000c88:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7e9b      	ldrb	r3, [r3, #26]
 8000c90:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c92:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d002      	beq.n	8000ca2 <HAL_ADC_Init+0x10e>
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	015b      	lsls	r3, r3, #5
 8000ca0:	e000      	b.n	8000ca4 <HAL_ADC_Init+0x110>
 8000ca2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ca4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000caa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_Init+0x124>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	e000      	b.n	8000cba <HAL_ADC_Init+0x126>
 8000cb8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000cba:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2124      	movs	r1, #36	; 0x24
 8000cc0:	5c5b      	ldrb	r3, [r3, r1]
 8000cc2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cc4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7edb      	ldrb	r3, [r3, #27]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d115      	bne.n	8000d00 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7e9b      	ldrb	r3, [r3, #26]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d105      	bne.n	8000ce8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	0252      	lsls	r2, r2, #9
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	e00b      	b.n	8000d00 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cec:	2220      	movs	r2, #32
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69da      	ldr	r2, [r3, #28]
 8000d04:	23c2      	movs	r3, #194	; 0xc2
 8000d06:	33ff      	adds	r3, #255	; 0xff
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d007      	beq.n	8000d1c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d14:	4313      	orrs	r3, r2
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68d9      	ldr	r1, [r3, #12]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	055b      	lsls	r3, r3, #21
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d01b      	beq.n	8000d70 <HAL_ADC_Init+0x1dc>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d017      	beq.n	8000d70 <HAL_ADC_Init+0x1dc>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d013      	beq.n	8000d70 <HAL_ADC_Init+0x1dc>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d00f      	beq.n	8000d70 <HAL_ADC_Init+0x1dc>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d00b      	beq.n	8000d70 <HAL_ADC_Init+0x1dc>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d007      	beq.n	8000d70 <HAL_ADC_Init+0x1dc>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	d003      	beq.n	8000d70 <HAL_ADC_Init+0x1dc>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6c:	2b07      	cmp	r3, #7
 8000d6e:	d112      	bne.n	8000d96 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	695a      	ldr	r2, [r3, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2107      	movs	r1, #7
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6959      	ldr	r1, [r3, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <HAL_ADC_Init+0x27c>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d10b      	bne.n	8000dbe <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db0:	2203      	movs	r2, #3
 8000db2:	4393      	bics	r3, r2
 8000db4:	2201      	movs	r2, #1
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dbc:	e01c      	b.n	8000df8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc2:	2212      	movs	r2, #18
 8000dc4:	4393      	bics	r3, r2
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000de2:	e009      	b.n	8000df8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de8:	2210      	movs	r2, #16
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	781b      	ldrb	r3, [r3, #0]
}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b004      	add	sp, #16
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	fffffefd 	.word	0xfffffefd
 8000e0c:	fffe0219 	.word	0xfffe0219
 8000e10:	833fffe7 	.word	0x833fffe7

08000e14 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d138      	bne.n	8000ea2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2234      	movs	r2, #52	; 0x34
 8000e34:	5c9b      	ldrb	r3, [r3, r2]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d101      	bne.n	8000e3e <HAL_ADC_Start+0x2a>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e038      	b.n	8000eb0 <HAL_ADC_Start+0x9c>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2234      	movs	r2, #52	; 0x34
 8000e42:	2101      	movs	r1, #1
 8000e44:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7e5b      	ldrb	r3, [r3, #25]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d007      	beq.n	8000e5e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e4e:	230f      	movs	r3, #15
 8000e50:	18fc      	adds	r4, r7, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 fa23 	bl	80012a0 <ADC_Enable>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e5e:	230f      	movs	r3, #15
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d120      	bne.n	8000eaa <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <HAL_ADC_Start+0xa4>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	0052      	lsls	r2, r2, #1
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2234      	movs	r2, #52	; 0x34
 8000e84:	2100      	movs	r1, #0
 8000e86:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	221c      	movs	r2, #28
 8000e8e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	e003      	b.n	8000eaa <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b005      	add	sp, #20
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	fffff0fe 	.word	0xfffff0fe

08000ebc <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2234      	movs	r2, #52	; 0x34
 8000ed0:	5c9b      	ldrb	r3, [r3, r2]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Stop+0x1e>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e029      	b.n	8000f2e <HAL_ADC_Stop+0x72>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2234      	movs	r2, #52	; 0x34
 8000ede:	2101      	movs	r1, #1
 8000ee0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000ee2:	250f      	movs	r5, #15
 8000ee4:	197c      	adds	r4, r7, r5
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 face 	bl	800148a <ADC_ConversionStop>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000ef2:	197b      	adds	r3, r7, r5
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d112      	bne.n	8000f20 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000efa:	197c      	adds	r4, r7, r5
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fa52 	bl	80013a8 <ADC_Disable>
 8000f04:	0003      	movs	r3, r0
 8000f06:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000f08:	197b      	adds	r3, r7, r5
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d107      	bne.n	8000f20 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_ADC_Stop+0x7c>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	2201      	movs	r2, #1
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2234      	movs	r2, #52	; 0x34
 8000f24:	2100      	movs	r1, #0
 8000f26:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f28:	230f      	movs	r3, #15
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	781b      	ldrb	r3, [r3, #0]
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bdb0      	pop	{r4, r5, r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	fffffefe 	.word	0xfffffefe

08000f3c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d102      	bne.n	8000f54 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	e014      	b.n	8000f7e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10b      	bne.n	8000f7a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f66:	2220      	movs	r2, #32
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2234      	movs	r2, #52	; 0x34
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e071      	b.n	800105e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f7e:	f7ff fddb 	bl	8000b38 <HAL_GetTick>
 8000f82:	0003      	movs	r3, r0
 8000f84:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f86:	e01f      	b.n	8000fc8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	d01c      	beq.n	8000fc8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <HAL_ADC_PollForConversion+0x68>
 8000f94:	f7ff fdd0 	bl	8000b38 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d211      	bcs.n	8000fc8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4013      	ands	r3, r2
 8000fae:	d10b      	bne.n	8000fc8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2234      	movs	r2, #52	; 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e04a      	b.n	800105e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d0d9      	beq.n	8000f88 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	23c0      	movs	r3, #192	; 0xc0
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4013      	ands	r3, r2
 8000fee:	d12d      	bne.n	800104c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d129      	bne.n	800104c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2208      	movs	r2, #8
 8001000:	4013      	ands	r3, r2
 8001002:	2b08      	cmp	r3, #8
 8001004:	d122      	bne.n	800104c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2204      	movs	r2, #4
 800100e:	4013      	ands	r3, r2
 8001010:	d110      	bne.n	8001034 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	210c      	movs	r1, #12
 800101e:	438a      	bics	r2, r1
 8001020:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_ADC_PollForConversion+0x12c>)
 8001028:	4013      	ands	r3, r2
 800102a:	2201      	movs	r2, #1
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
 8001032:	e00b      	b.n	800104c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	2220      	movs	r2, #32
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	2201      	movs	r2, #1
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e1b      	ldrb	r3, [r3, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d103      	bne.n	800105c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	220c      	movs	r2, #12
 800105a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	fffffefe 	.word	0xfffffefe

0800106c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108e:	230f      	movs	r3, #15
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d011      	beq.n	80010ca <HAL_ADC_ConfigChannel+0x46>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d00d      	beq.n	80010ca <HAL_ADC_ConfigChannel+0x46>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d009      	beq.n	80010ca <HAL_ADC_ConfigChannel+0x46>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d005      	beq.n	80010ca <HAL_ADC_ConfigChannel+0x46>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d001      	beq.n	80010ca <HAL_ADC_ConfigChannel+0x46>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2234      	movs	r2, #52	; 0x34
 80010ce:	5c9b      	ldrb	r3, [r3, r2]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x54>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e0d0      	b.n	800127a <HAL_ADC_ConfigChannel+0x1f6>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2234      	movs	r2, #52	; 0x34
 80010dc:	2101      	movs	r1, #1
 80010de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	d000      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x6a>
 80010ec:	e0b4      	b.n	8001258 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4a64      	ldr	r2, [pc, #400]	; (8001284 <HAL_ADC_ConfigChannel+0x200>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d100      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x76>
 80010f8:	e082      	b.n	8001200 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	409a      	lsls	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	055b      	lsls	r3, r3, #21
 8001118:	429a      	cmp	r2, r3
 800111a:	d037      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	2b01      	cmp	r3, #1
 8001122:	d033      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001128:	2b02      	cmp	r3, #2
 800112a:	d02f      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	2b03      	cmp	r3, #3
 8001132:	d02b      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	2b04      	cmp	r3, #4
 800113a:	d027      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	2b05      	cmp	r3, #5
 8001142:	d023      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	2b06      	cmp	r3, #6
 800114a:	d01f      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	2b07      	cmp	r3, #7
 8001152:	d01b      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	2107      	movs	r1, #7
 8001160:	400b      	ands	r3, r1
 8001162:	429a      	cmp	r2, r3
 8001164:	d012      	beq.n	800118c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2107      	movs	r1, #7
 8001172:	438a      	bics	r2, r1
 8001174:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6959      	ldr	r1, [r3, #20]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2207      	movs	r2, #7
 8001182:	401a      	ands	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b10      	cmp	r3, #16
 8001192:	d007      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x120>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b11      	cmp	r3, #17
 800119a:	d003      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x120>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b12      	cmp	r3, #18
 80011a2:	d163      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011a4:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_ADC_ConfigChannel+0x204>)
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b10      	cmp	r3, #16
 80011ae:	d009      	beq.n	80011c4 <HAL_ADC_ConfigChannel+0x140>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b11      	cmp	r3, #17
 80011b6:	d102      	bne.n	80011be <HAL_ADC_ConfigChannel+0x13a>
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	03db      	lsls	r3, r3, #15
 80011bc:	e004      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x144>
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	045b      	lsls	r3, r3, #17
 80011c2:	e001      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x144>
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <HAL_ADC_ConfigChannel+0x204>)
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d14a      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_ADC_ConfigChannel+0x208>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	492d      	ldr	r1, [pc, #180]	; (8001290 <HAL_ADC_ConfigChannel+0x20c>)
 80011dc:	0018      	movs	r0, r3
 80011de:	f7fe ff9b 	bl	8000118 <__udivsi3>
 80011e2:	0003      	movs	r3, r0
 80011e4:	001a      	movs	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	189b      	adds	r3, r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f9      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x16e>
 80011fe:	e035      	b.n	800126c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2101      	movs	r1, #1
 800120c:	4099      	lsls	r1, r3
 800120e:	000b      	movs	r3, r1
 8001210:	43d9      	mvns	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	400a      	ands	r2, r1
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d007      	beq.n	8001232 <HAL_ADC_ConfigChannel+0x1ae>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b11      	cmp	r3, #17
 8001228:	d003      	beq.n	8001232 <HAL_ADC_ConfigChannel+0x1ae>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b12      	cmp	r3, #18
 8001230:	d11c      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_ADC_ConfigChannel+0x204>)
 8001234:	6819      	ldr	r1, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b10      	cmp	r3, #16
 800123c:	d007      	beq.n	800124e <HAL_ADC_ConfigChannel+0x1ca>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b11      	cmp	r3, #17
 8001244:	d101      	bne.n	800124a <HAL_ADC_ConfigChannel+0x1c6>
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_ADC_ConfigChannel+0x210>)
 8001248:	e002      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1cc>
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_ADC_ConfigChannel+0x214>)
 800124c:	e000      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1cc>
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_ADC_ConfigChannel+0x218>)
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_ADC_ConfigChannel+0x204>)
 8001252:	400b      	ands	r3, r1
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e009      	b.n	800126c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	2220      	movs	r2, #32
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2234      	movs	r2, #52	; 0x34
 8001270:	2100      	movs	r1, #0
 8001272:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001274:	230f      	movs	r3, #15
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	781b      	ldrb	r3, [r3, #0]
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b004      	add	sp, #16
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	00001001 	.word	0x00001001
 8001288:	40012708 	.word	0x40012708
 800128c:	200000dc 	.word	0x200000dc
 8001290:	000f4240 	.word	0x000f4240
 8001294:	ffbfffff 	.word	0xffbfffff
 8001298:	feffffff 	.word	0xfeffffff
 800129c:	ff7fffff 	.word	0xff7fffff

080012a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2203      	movs	r2, #3
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d112      	bne.n	80012e4 <ADC_Enable+0x44>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2201      	movs	r2, #1
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d009      	beq.n	80012e0 <ADC_Enable+0x40>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	401a      	ands	r2, r3
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	429a      	cmp	r2, r3
 80012de:	d101      	bne.n	80012e4 <ADC_Enable+0x44>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <ADC_Enable+0x46>
 80012e4:	2300      	movs	r3, #0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d152      	bne.n	8001390 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a2a      	ldr	r2, [pc, #168]	; (800139c <ADC_Enable+0xfc>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	d00d      	beq.n	8001312 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	2210      	movs	r2, #16
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001306:	2201      	movs	r2, #1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e03f      	b.n	8001392 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <ADC_Enable+0x100>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	491f      	ldr	r1, [pc, #124]	; (80013a4 <ADC_Enable+0x104>)
 8001328:	0018      	movs	r0, r3
 800132a:	f7fe fef5 	bl	8000118 <__udivsi3>
 800132e:	0003      	movs	r3, r0
 8001330:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001332:	e002      	b.n	800133a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3b01      	subs	r3, #1
 8001338:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f9      	bne.n	8001334 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001340:	f7ff fbfa 	bl	8000b38 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001348:	e01b      	b.n	8001382 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800134a:	f7ff fbf5 	bl	8000b38 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d914      	bls.n	8001382 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2201      	movs	r2, #1
 8001360:	4013      	ands	r3, r2
 8001362:	2b01      	cmp	r3, #1
 8001364:	d00d      	beq.n	8001382 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	2210      	movs	r2, #16
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001376:	2201      	movs	r2, #1
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e007      	b.n	8001392 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	2b01      	cmp	r3, #1
 800138e:	d1dc      	bne.n	800134a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	80000017 	.word	0x80000017
 80013a0:	200000dc 	.word	0x200000dc
 80013a4:	000f4240 	.word	0x000f4240

080013a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2203      	movs	r2, #3
 80013bc:	4013      	ands	r3, r2
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d112      	bne.n	80013e8 <ADC_Disable+0x40>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d009      	beq.n	80013e4 <ADC_Disable+0x3c>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	401a      	ands	r2, r3
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d101      	bne.n	80013e8 <ADC_Disable+0x40>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <ADC_Disable+0x42>
 80013e8:	2300      	movs	r3, #0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d048      	beq.n	8001480 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2205      	movs	r2, #5
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d110      	bne.n	800141e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2102      	movs	r1, #2
 8001408:	430a      	orrs	r2, r1
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2203      	movs	r2, #3
 8001412:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001414:	f7ff fb90 	bl	8000b38 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800141c:	e029      	b.n	8001472 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001422:	2210      	movs	r2, #16
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142e:	2201      	movs	r2, #1
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e023      	b.n	8001482 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800143a:	f7ff fb7d 	bl	8000b38 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d914      	bls.n	8001472 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2201      	movs	r2, #1
 8001450:	4013      	ands	r3, r2
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10d      	bne.n	8001472 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	2210      	movs	r2, #16
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001466:	2201      	movs	r2, #1
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e007      	b.n	8001482 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2201      	movs	r2, #1
 800147a:	4013      	ands	r3, r2
 800147c:	2b01      	cmp	r3, #1
 800147e:	d0dc      	beq.n	800143a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b004      	add	sp, #16
 8001488:	bd80      	pop	{r7, pc}

0800148a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2204      	movs	r2, #4
 800149e:	4013      	ands	r3, r2
 80014a0:	d03a      	beq.n	8001518 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2204      	movs	r2, #4
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d10d      	bne.n	80014cc <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014ba:	d107      	bne.n	80014cc <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2110      	movs	r1, #16
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014cc:	f7ff fb34 	bl	8000b38 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014d4:	e01a      	b.n	800150c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014d6:	f7ff fb2f 	bl	8000b38 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d913      	bls.n	800150c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2204      	movs	r2, #4
 80014ec:	4013      	ands	r3, r2
 80014ee:	d00d      	beq.n	800150c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f4:	2210      	movs	r2, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	2201      	movs	r2, #1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e006      	b.n	800151a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2204      	movs	r2, #4
 8001514:	4013      	ands	r3, r2
 8001516:	d1de      	bne.n	80014d6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b004      	add	sp, #16
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	0002      	movs	r2, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b7f      	cmp	r3, #127	; 0x7f
 8001538:	d828      	bhi.n	800158c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800153a:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <__NVIC_SetPriority+0xd4>)
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b25b      	sxtb	r3, r3
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	33c0      	adds	r3, #192	; 0xc0
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	589b      	ldr	r3, [r3, r2]
 800154a:	1dfa      	adds	r2, r7, #7
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	0011      	movs	r1, r2
 8001550:	2203      	movs	r2, #3
 8001552:	400a      	ands	r2, r1
 8001554:	00d2      	lsls	r2, r2, #3
 8001556:	21ff      	movs	r1, #255	; 0xff
 8001558:	4091      	lsls	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	43d2      	mvns	r2, r2
 800155e:	401a      	ands	r2, r3
 8001560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	401a      	ands	r2, r3
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	0018      	movs	r0, r3
 8001570:	2303      	movs	r3, #3
 8001572:	4003      	ands	r3, r0
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001578:	481f      	ldr	r0, [pc, #124]	; (80015f8 <__NVIC_SetPriority+0xd4>)
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b25b      	sxtb	r3, r3
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	430a      	orrs	r2, r1
 8001584:	33c0      	adds	r3, #192	; 0xc0
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800158a:	e031      	b.n	80015f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <__NVIC_SetPriority+0xd8>)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	0019      	movs	r1, r3
 8001594:	230f      	movs	r3, #15
 8001596:	400b      	ands	r3, r1
 8001598:	3b08      	subs	r3, #8
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3306      	adds	r3, #6
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	3304      	adds	r3, #4
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	1dfa      	adds	r2, r7, #7
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	0011      	movs	r1, r2
 80015ac:	2203      	movs	r2, #3
 80015ae:	400a      	ands	r2, r1
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	21ff      	movs	r1, #255	; 0xff
 80015b4:	4091      	lsls	r1, r2
 80015b6:	000a      	movs	r2, r1
 80015b8:	43d2      	mvns	r2, r2
 80015ba:	401a      	ands	r2, r3
 80015bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	401a      	ands	r2, r3
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	2303      	movs	r3, #3
 80015ce:	4003      	ands	r3, r0
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d4:	4809      	ldr	r0, [pc, #36]	; (80015fc <__NVIC_SetPriority+0xd8>)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	001c      	movs	r4, r3
 80015dc:	230f      	movs	r3, #15
 80015de:	4023      	ands	r3, r4
 80015e0:	3b08      	subs	r3, #8
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	430a      	orrs	r2, r1
 80015e6:	3306      	adds	r3, #6
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	18c3      	adds	r3, r0, r3
 80015ec:	3304      	adds	r3, #4
 80015ee:	601a      	str	r2, [r3, #0]
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b003      	add	sp, #12
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	045b      	lsls	r3, r3, #17
 8001610:	429a      	cmp	r2, r3
 8001612:	d301      	bcc.n	8001618 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001614:	2301      	movs	r3, #1
 8001616:	e010      	b.n	800163a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <SysTick_Config+0x44>)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	3a01      	subs	r2, #1
 800161e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001620:	2301      	movs	r3, #1
 8001622:	425b      	negs	r3, r3
 8001624:	2103      	movs	r1, #3
 8001626:	0018      	movs	r0, r3
 8001628:	f7ff ff7c 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x44>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x44>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	0018      	movs	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	210f      	movs	r1, #15
 8001654:	187b      	adds	r3, r7, r1
 8001656:	1c02      	adds	r2, r0, #0
 8001658:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	187b      	adds	r3, r7, r1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b25b      	sxtb	r3, r3
 8001662:	0011      	movs	r1, r2
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b004      	add	sp, #16
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff ffbf 	bl	8001600 <SysTick_Config>
 8001682:	0003      	movs	r3, r0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169a:	e14f      	b.n	800193c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4091      	lsls	r1, r2
 80016a6:	000a      	movs	r2, r1
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d100      	bne.n	80016b4 <HAL_GPIO_Init+0x28>
 80016b2:	e140      	b.n	8001936 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d005      	beq.n	80016cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d130      	bne.n	800172e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	409a      	lsls	r2, r3
 80016da:	0013      	movs	r3, r2
 80016dc:	43da      	mvns	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001702:	2201      	movs	r2, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	2201      	movs	r2, #1
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	4013      	ands	r3, r2
 8001736:	2b03      	cmp	r3, #3
 8001738:	d017      	beq.n	800176a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	409a      	lsls	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	43da      	mvns	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	4013      	ands	r3, r2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d123      	bne.n	80017be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	58d3      	ldr	r3, [r2, r3]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2207      	movs	r2, #7
 8001788:	4013      	ands	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2107      	movs	r1, #7
 80017a2:	400b      	ands	r3, r1
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	6939      	ldr	r1, [r7, #16]
 80017bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2203      	movs	r2, #3
 80017dc:	401a      	ands	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	23c0      	movs	r3, #192	; 0xc0
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	4013      	ands	r3, r2
 80017fc:	d100      	bne.n	8001800 <HAL_GPIO_Init+0x174>
 80017fe:	e09a      	b.n	8001936 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001800:	4b54      	ldr	r3, [pc, #336]	; (8001954 <HAL_GPIO_Init+0x2c8>)
 8001802:	699a      	ldr	r2, [r3, #24]
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_GPIO_Init+0x2c8>)
 8001806:	2101      	movs	r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	619a      	str	r2, [r3, #24]
 800180c:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_GPIO_Init+0x2c8>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001818:	4a4f      	ldr	r2, [pc, #316]	; (8001958 <HAL_GPIO_Init+0x2cc>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	589b      	ldr	r3, [r3, r2]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2203      	movs	r2, #3
 800182a:	4013      	ands	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	409a      	lsls	r2, r3
 8001832:	0013      	movs	r3, r2
 8001834:	43da      	mvns	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	2390      	movs	r3, #144	; 0x90
 8001840:	05db      	lsls	r3, r3, #23
 8001842:	429a      	cmp	r2, r3
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x1e2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a44      	ldr	r2, [pc, #272]	; (800195c <HAL_GPIO_Init+0x2d0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x1de>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a43      	ldr	r2, [pc, #268]	; (8001960 <HAL_GPIO_Init+0x2d4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x1da>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a42      	ldr	r2, [pc, #264]	; (8001964 <HAL_GPIO_Init+0x2d8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x1d6>
 800185e:	2303      	movs	r3, #3
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x1e4>
 8001862:	2305      	movs	r3, #5
 8001864:	e004      	b.n	8001870 <HAL_GPIO_Init+0x1e4>
 8001866:	2302      	movs	r3, #2
 8001868:	e002      	b.n	8001870 <HAL_GPIO_Init+0x1e4>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x1e4>
 800186e:	2300      	movs	r3, #0
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	2103      	movs	r1, #3
 8001874:	400a      	ands	r2, r1
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	4093      	lsls	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001880:	4935      	ldr	r1, [pc, #212]	; (8001958 <HAL_GPIO_Init+0x2cc>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43da      	mvns	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	025b      	lsls	r3, r3, #9
 80018a6:	4013      	ands	r3, r2
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43da      	mvns	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4013      	ands	r3, r2
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43da      	mvns	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	035b      	lsls	r3, r3, #13
 80018fa:	4013      	ands	r3, r2
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	039b      	lsls	r3, r3, #14
 8001924:	4013      	ands	r3, r2
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	40da      	lsrs	r2, r3
 8001944:	1e13      	subs	r3, r2, #0
 8001946:	d000      	beq.n	800194a <HAL_GPIO_Init+0x2be>
 8001948:	e6a8      	b.n	800169c <HAL_GPIO_Init+0x10>
  } 
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b006      	add	sp, #24
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000
 800195c:	48000400 	.word	0x48000400
 8001960:	48000800 	.word	0x48000800
 8001964:	48000c00 	.word	0x48000c00
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	0008      	movs	r0, r1
 8001976:	0011      	movs	r1, r2
 8001978:	1cbb      	adds	r3, r7, #2
 800197a:	1c02      	adds	r2, r0, #0
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	1c7b      	adds	r3, r7, #1
 8001980:	1c0a      	adds	r2, r1, #0
 8001982:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001984:	1c7b      	adds	r3, r7, #1
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198c:	1cbb      	adds	r3, r7, #2
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001996:	1cbb      	adds	r3, r7, #2
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	000a      	movs	r2, r1
 80019b0:	1cbb      	adds	r3, r7, #2
 80019b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ba:	1cbb      	adds	r3, r7, #2
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	041a      	lsls	r2, r3, #16
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	1cb9      	adds	r1, r7, #2
 80019ca:	8809      	ldrh	r1, [r1, #0]
 80019cc:	400b      	ands	r3, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	619a      	str	r2, [r3, #24]
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e082      	b.n	8001af4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2241      	movs	r2, #65	; 0x41
 80019f2:	5c9b      	ldrb	r3, [r3, r2]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe ff5d 	bl	80008c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2241      	movs	r2, #65	; 0x41
 8001a0e:	2124      	movs	r1, #36	; 0x24
 8001a10:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	438a      	bics	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4934      	ldr	r1, [pc, #208]	; (8001afc <HAL_I2C_Init+0x120>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4931      	ldr	r1, [pc, #196]	; (8001b00 <HAL_I2C_Init+0x124>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0209      	lsls	r1, r1, #8
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	e007      	b.n	8001a6a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2184      	movs	r1, #132	; 0x84
 8001a64:	0209      	lsls	r1, r1, #8
 8001a66:	430a      	orrs	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d104      	bne.n	8001a7c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	491f      	ldr	r1, [pc, #124]	; (8001b04 <HAL_I2C_Init+0x128>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	491a      	ldr	r1, [pc, #104]	; (8001b00 <HAL_I2C_Init+0x124>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69d9      	ldr	r1, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2241      	movs	r2, #65	; 0x41
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2242      	movs	r2, #66	; 0x42
 8001aee:	2100      	movs	r1, #0
 8001af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	f0ffffff 	.word	0xf0ffffff
 8001b00:	ffff7fff 	.word	0xffff7fff
 8001b04:	02008000 	.word	0x02008000

08001b08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	000c      	movs	r4, r1
 8001b12:	0010      	movs	r0, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	230a      	movs	r3, #10
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	1c22      	adds	r2, r4, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	2308      	movs	r3, #8
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	1c02      	adds	r2, r0, #0
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	1dbb      	adds	r3, r7, #6
 8001b28:	1c0a      	adds	r2, r1, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2241      	movs	r2, #65	; 0x41
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d000      	beq.n	8001b3a <HAL_I2C_Mem_Write+0x32>
 8001b38:	e10c      	b.n	8001d54 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <HAL_I2C_Mem_Write+0x42>
 8001b40:	232c      	movs	r3, #44	; 0x2c
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0ff      	b.n	8001d56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2240      	movs	r2, #64	; 0x40
 8001b5a:	5c9b      	ldrb	r3, [r3, r2]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_I2C_Mem_Write+0x5c>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e0f8      	b.n	8001d56 <HAL_I2C_Mem_Write+0x24e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	2101      	movs	r1, #1
 8001b6a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b6c:	f7fe ffe4 	bl	8000b38 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	0219      	lsls	r1, r3, #8
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2319      	movs	r3, #25
 8001b80:	2201      	movs	r2, #1
 8001b82:	f000 fb0b 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001b86:	1e03      	subs	r3, r0, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0e3      	b.n	8001d56 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2241      	movs	r2, #65	; 0x41
 8001b92:	2121      	movs	r1, #33	; 0x21
 8001b94:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2242      	movs	r2, #66	; 0x42
 8001b9a:	2140      	movs	r1, #64	; 0x40
 8001b9c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	222c      	movs	r2, #44	; 0x2c
 8001bae:	18ba      	adds	r2, r7, r2
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bba:	1dbb      	adds	r3, r7, #6
 8001bbc:	881c      	ldrh	r4, [r3, #0]
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	230a      	movs	r3, #10
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	8819      	ldrh	r1, [r3, #0]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	0023      	movs	r3, r4
 8001bd6:	f000 f9f9 	bl	8001fcc <I2C_RequestMemoryWrite>
 8001bda:	1e03      	subs	r3, r0, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2240      	movs	r2, #64	; 0x40
 8001be2:	2100      	movs	r1, #0
 8001be4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0b5      	b.n	8001d56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2bff      	cmp	r3, #255	; 0xff
 8001bf2:	d911      	bls.n	8001c18 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	22ff      	movs	r2, #255	; 0xff
 8001bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	045c      	lsls	r4, r3, #17
 8001c04:	230a      	movs	r3, #10
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	8819      	ldrh	r1, [r3, #0]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	0023      	movs	r3, r4
 8001c12:	f000 fbf7 	bl	8002404 <I2C_TransferConfig>
 8001c16:	e012      	b.n	8001c3e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	049c      	lsls	r4, r3, #18
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	8819      	ldrh	r1, [r3, #0]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	2300      	movs	r3, #0
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	0023      	movs	r3, r4
 8001c3a:	f000 fbe3 	bl	8002404 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 fae8 	bl	800221a <I2C_WaitOnTXISFlagUntilTimeout>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e081      	b.n	8001d56 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d03a      	beq.n	8001d02 <HAL_I2C_Mem_Write+0x1fa>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d136      	bne.n	8001d02 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	0013      	movs	r3, r2
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	f000 fa7b 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e053      	b.n	8001d56 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2bff      	cmp	r3, #255	; 0xff
 8001cb6:	d911      	bls.n	8001cdc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	22ff      	movs	r2, #255	; 0xff
 8001cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	045c      	lsls	r4, r3, #17
 8001cc8:	230a      	movs	r3, #10
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	8819      	ldrh	r1, [r3, #0]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	0023      	movs	r3, r4
 8001cd6:	f000 fb95 	bl	8002404 <I2C_TransferConfig>
 8001cda:	e012      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	049c      	lsls	r4, r3, #18
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	8819      	ldrh	r1, [r3, #0]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	0023      	movs	r3, r4
 8001cfe:	f000 fb81 	bl	8002404 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d198      	bne.n	8001c3e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	0018      	movs	r0, r3
 8001d14:	f000 fac0 	bl	8002298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e01a      	b.n	8001d56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2220      	movs	r2, #32
 8001d26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	490b      	ldr	r1, [pc, #44]	; (8001d60 <HAL_I2C_Mem_Write+0x258>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2241      	movs	r2, #65	; 0x41
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2242      	movs	r2, #66	; 0x42
 8001d44:	2100      	movs	r1, #0
 8001d46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e000      	b.n	8001d56 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001d54:	2302      	movs	r3, #2
  }
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b007      	add	sp, #28
 8001d5c:	bd90      	pop	{r4, r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	fe00e800 	.word	0xfe00e800

08001d64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	000c      	movs	r4, r1
 8001d6e:	0010      	movs	r0, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	230a      	movs	r3, #10
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	1c22      	adds	r2, r4, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	2308      	movs	r3, #8
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	1c02      	adds	r2, r0, #0
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	1dbb      	adds	r3, r7, #6
 8001d84:	1c0a      	adds	r2, r1, #0
 8001d86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2241      	movs	r2, #65	; 0x41
 8001d8c:	5c9b      	ldrb	r3, [r3, r2]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d000      	beq.n	8001d96 <HAL_I2C_Mem_Read+0x32>
 8001d94:	e110      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_I2C_Mem_Read+0x42>
 8001d9c:	232c      	movs	r3, #44	; 0x2c
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e103      	b.n	8001fba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	5c9b      	ldrb	r3, [r3, r2]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2C_Mem_Read+0x5c>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e0fc      	b.n	8001fba <HAL_I2C_Mem_Read+0x256>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dc8:	f7fe feb6 	bl	8000b38 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	0219      	lsls	r1, r3, #8
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2319      	movs	r3, #25
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f000 f9dd 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0e7      	b.n	8001fba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2241      	movs	r2, #65	; 0x41
 8001dee:	2122      	movs	r1, #34	; 0x22
 8001df0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2242      	movs	r2, #66	; 0x42
 8001df6:	2140      	movs	r1, #64	; 0x40
 8001df8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	222c      	movs	r2, #44	; 0x2c
 8001e0a:	18ba      	adds	r2, r7, r2
 8001e0c:	8812      	ldrh	r2, [r2, #0]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	881c      	ldrh	r4, [r3, #0]
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	881a      	ldrh	r2, [r3, #0]
 8001e20:	230a      	movs	r3, #10
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	8819      	ldrh	r1, [r3, #0]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	0023      	movs	r3, r4
 8001e32:	f000 f92f 	bl	8002094 <I2C_RequestMemoryRead>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2240      	movs	r2, #64	; 0x40
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0b9      	b.n	8001fba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2bff      	cmp	r3, #255	; 0xff
 8001e4e:	d911      	bls.n	8001e74 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	22ff      	movs	r2, #255	; 0xff
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	045c      	lsls	r4, r3, #17
 8001e60:	230a      	movs	r3, #10
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	8819      	ldrh	r1, [r3, #0]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <HAL_I2C_Mem_Read+0x260>)
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	f000 fac9 	bl	8002404 <I2C_TransferConfig>
 8001e72:	e012      	b.n	8001e9a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	049c      	lsls	r4, r3, #18
 8001e88:	230a      	movs	r3, #10
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	8819      	ldrh	r1, [r3, #0]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <HAL_I2C_Mem_Read+0x260>)
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	0023      	movs	r3, r4
 8001e96:	f000 fab5 	bl	8002404 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	f000 f978 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e082      	b.n	8001fba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d03a      	beq.n	8001f66 <HAL_I2C_Mem_Read+0x202>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d136      	bne.n	8001f66 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	0013      	movs	r3, r2
 8001f02:	2200      	movs	r2, #0
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	f000 f949 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e053      	b.n	8001fba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2bff      	cmp	r3, #255	; 0xff
 8001f1a:	d911      	bls.n	8001f40 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	045c      	lsls	r4, r3, #17
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	8819      	ldrh	r1, [r3, #0]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	2300      	movs	r3, #0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	0023      	movs	r3, r4
 8001f3a:	f000 fa63 	bl	8002404 <I2C_TransferConfig>
 8001f3e:	e012      	b.n	8001f66 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	049c      	lsls	r4, r3, #18
 8001f54:	230a      	movs	r3, #10
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	8819      	ldrh	r1, [r3, #0]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	0023      	movs	r3, r4
 8001f62:	f000 fa4f 	bl	8002404 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d194      	bne.n	8001e9a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 f98e 	bl	8002298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f7c:	1e03      	subs	r3, r0, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e01a      	b.n	8001fba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <HAL_I2C_Mem_Read+0x264>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2241      	movs	r2, #65	; 0x41
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2242      	movs	r2, #66	; 0x42
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b007      	add	sp, #28
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	80002400 	.word	0x80002400
 8001fc8:	fe00e800 	.word	0xfe00e800

08001fcc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001fcc:	b5b0      	push	{r4, r5, r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	000c      	movs	r4, r1
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	250a      	movs	r5, #10
 8001fdc:	197b      	adds	r3, r7, r5
 8001fde:	1c22      	adds	r2, r4, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	1c02      	adds	r2, r0, #0
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	1dbb      	adds	r3, r7, #6
 8001fec:	1c0a      	adds	r2, r1, #0
 8001fee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ff0:	1dbb      	adds	r3, r7, #6
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	045c      	lsls	r4, r3, #17
 8001ffa:	197b      	adds	r3, r7, r5
 8001ffc:	8819      	ldrh	r1, [r3, #0]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <I2C_RequestMemoryWrite+0xc4>)
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	0023      	movs	r3, r4
 8002006:	f000 f9fd 	bl	8002404 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	6a39      	ldr	r1, [r7, #32]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 f902 	bl	800221a <I2C_WaitOnTXISFlagUntilTimeout>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d001      	beq.n	800201e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e033      	b.n	8002086 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800201e:	1dbb      	adds	r3, r7, #6
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002026:	2308      	movs	r3, #8
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
 8002034:	e019      	b.n	800206a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002036:	2308      	movs	r3, #8
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	b29b      	uxth	r3, r3
 8002040:	b2da      	uxtb	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204a:	6a39      	ldr	r1, [r7, #32]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f8e3 	bl	800221a <I2C_WaitOnTXISFlagUntilTimeout>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e014      	b.n	8002086 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800205c:	2308      	movs	r3, #8
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800206a:	6a3a      	ldr	r2, [r7, #32]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	0013      	movs	r3, r2
 8002074:	2200      	movs	r2, #0
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	f000 f890 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 800207c:	1e03      	subs	r3, r0, #0
 800207e:	d001      	beq.n	8002084 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bdb0      	pop	{r4, r5, r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	80002000 	.word	0x80002000

08002094 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	000c      	movs	r4, r1
 800209e:	0010      	movs	r0, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	250a      	movs	r5, #10
 80020a4:	197b      	adds	r3, r7, r5
 80020a6:	1c22      	adds	r2, r4, #0
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	2308      	movs	r3, #8
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	1c02      	adds	r2, r0, #0
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	1dbb      	adds	r3, r7, #6
 80020b4:	1c0a      	adds	r2, r1, #0
 80020b6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020b8:	1dbb      	adds	r3, r7, #6
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	197b      	adds	r3, r7, r5
 80020c0:	8819      	ldrh	r1, [r3, #0]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <I2C_RequestMemoryRead+0xc0>)
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2300      	movs	r3, #0
 80020ca:	f000 f99b 	bl	8002404 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	6a39      	ldr	r1, [r7, #32]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 f8a0 	bl	800221a <I2C_WaitOnTXISFlagUntilTimeout>
 80020da:	1e03      	subs	r3, r0, #0
 80020dc:	d001      	beq.n	80020e2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e033      	b.n	800214a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020e2:	1dbb      	adds	r3, r7, #6
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020ea:	2308      	movs	r3, #8
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
 80020f8:	e019      	b.n	800212e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020fa:	2308      	movs	r3, #8
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	b29b      	uxth	r3, r3
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	6a39      	ldr	r1, [r7, #32]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0018      	movs	r0, r3
 8002114:	f000 f881 	bl	800221a <I2C_WaitOnTXISFlagUntilTimeout>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d001      	beq.n	8002120 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e014      	b.n	800214a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002120:	2308      	movs	r3, #8
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800212e:	6a3a      	ldr	r2, [r7, #32]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	0013      	movs	r3, r2
 8002138:	2200      	movs	r2, #0
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	f000 f82e 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8002140:	1e03      	subs	r3, r0, #0
 8002142:	d001      	beq.n	8002148 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	80002000 	.word	0x80002000

08002158 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2202      	movs	r2, #2
 8002168:	4013      	ands	r3, r2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d103      	bne.n	8002176 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2201      	movs	r2, #1
 800217e:	4013      	ands	r3, r2
 8002180:	2b01      	cmp	r3, #1
 8002182:	d007      	beq.n	8002194 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	430a      	orrs	r2, r1
 8002192:	619a      	str	r2, [r3, #24]
  }
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	1dfb      	adds	r3, r7, #7
 80021aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ac:	e021      	b.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	d01e      	beq.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7fe fcc0 	bl	8000b38 <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x2e>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d113      	bne.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	2220      	movs	r2, #32
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2241      	movs	r2, #65	; 0x41
 80021da:	2120      	movs	r1, #32
 80021dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2242      	movs	r2, #66	; 0x42
 80021e2:	2100      	movs	r1, #0
 80021e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	4013      	ands	r3, r2
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	425a      	negs	r2, r3
 8002202:	4153      	adcs	r3, r2
 8002204:	b2db      	uxtb	r3, r3
 8002206:	001a      	movs	r2, r3
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d0ce      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b004      	add	sp, #16
 8002218:	bd80      	pop	{r7, pc}

0800221a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002226:	e02b      	b.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	0018      	movs	r0, r3
 8002230:	f000 f86e 	bl	8002310 <I2C_IsAcknowledgeFailed>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e029      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3301      	adds	r3, #1
 8002240:	d01e      	beq.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7fe fc79 	bl	8000b38 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	2220      	movs	r2, #32
 800225e:	431a      	orrs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2241      	movs	r2, #65	; 0x41
 8002268:	2120      	movs	r1, #32
 800226a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2242      	movs	r2, #66	; 0x42
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	2100      	movs	r1, #0
 800227a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2202      	movs	r2, #2
 8002288:	4013      	ands	r3, r2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d1cc      	bne.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a4:	e028      	b.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f82f 	bl	8002310 <I2C_IsAcknowledgeFailed>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e026      	b.n	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7fe fc3d 	bl	8000b38 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d113      	bne.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	2220      	movs	r2, #32
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2241      	movs	r2, #65	; 0x41
 80022e0:	2120      	movs	r1, #32
 80022e2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2242      	movs	r2, #66	; 0x42
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e007      	b.n	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2220      	movs	r2, #32
 8002300:	4013      	ands	r3, r2
 8002302:	2b20      	cmp	r3, #32
 8002304:	d1cf      	bne.n	80022a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b004      	add	sp, #16
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2210      	movs	r2, #16
 8002324:	4013      	ands	r3, r2
 8002326:	2b10      	cmp	r3, #16
 8002328:	d164      	bne.n	80023f4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	049b      	lsls	r3, r3, #18
 8002334:	401a      	ands	r2, r3
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	049b      	lsls	r3, r3, #18
 800233a:	429a      	cmp	r2, r3
 800233c:	d02b      	beq.n	8002396 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	01c9      	lsls	r1, r1, #7
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002350:	e021      	b.n	8002396 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	d01e      	beq.n	8002396 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002358:	f7fe fbee 	bl	8000b38 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <I2C_IsAcknowledgeFailed+0x5e>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d113      	bne.n	8002396 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	2220      	movs	r2, #32
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2241      	movs	r2, #65	; 0x41
 800237e:	2120      	movs	r1, #32
 8002380:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2242      	movs	r2, #66	; 0x42
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2240      	movs	r2, #64	; 0x40
 800238e:	2100      	movs	r1, #0
 8002390:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e02f      	b.n	80023f6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2220      	movs	r2, #32
 800239e:	4013      	ands	r3, r2
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d1d6      	bne.n	8002352 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2210      	movs	r2, #16
 80023aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2220      	movs	r2, #32
 80023b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff fece 	bl	8002158 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	490e      	ldr	r1, [pc, #56]	; (8002400 <I2C_IsAcknowledgeFailed+0xf0>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	2204      	movs	r2, #4
 80023d2:	431a      	orrs	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2241      	movs	r2, #65	; 0x41
 80023dc:	2120      	movs	r1, #32
 80023de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2242      	movs	r2, #66	; 0x42
 80023e4:	2100      	movs	r1, #0
 80023e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	fe00e800 	.word	0xfe00e800

08002404 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	0008      	movs	r0, r1
 800240e:	0011      	movs	r1, r2
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	240a      	movs	r4, #10
 8002414:	193b      	adds	r3, r7, r4
 8002416:	1c02      	adds	r2, r0, #0
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	2009      	movs	r0, #9
 800241c:	183b      	adds	r3, r7, r0
 800241e:	1c0a      	adds	r2, r1, #0
 8002420:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	0d51      	lsrs	r1, r2, #21
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	00d2      	lsls	r2, r2, #3
 8002430:	400a      	ands	r2, r1
 8002432:	490e      	ldr	r1, [pc, #56]	; (800246c <I2C_TransferConfig+0x68>)
 8002434:	430a      	orrs	r2, r1
 8002436:	43d2      	mvns	r2, r2
 8002438:	401a      	ands	r2, r3
 800243a:	0011      	movs	r1, r2
 800243c:	193b      	adds	r3, r7, r4
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	059b      	lsls	r3, r3, #22
 8002442:	0d9a      	lsrs	r2, r3, #22
 8002444:	183b      	adds	r3, r7, r0
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	0418      	lsls	r0, r3, #16
 800244a:	23ff      	movs	r3, #255	; 0xff
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	4003      	ands	r3, r0
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	431a      	orrs	r2, r3
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b005      	add	sp, #20
 8002468:	bd90      	pop	{r4, r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	03ff63ff 	.word	0x03ff63ff

08002470 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2241      	movs	r2, #65	; 0x41
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	d138      	bne.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2240      	movs	r2, #64	; 0x40
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002490:	2302      	movs	r3, #2
 8002492:	e032      	b.n	80024fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	2101      	movs	r1, #1
 800249a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2241      	movs	r2, #65	; 0x41
 80024a0:	2124      	movs	r1, #36	; 0x24
 80024a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4911      	ldr	r1, [pc, #68]	; (8002504 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2241      	movs	r2, #65	; 0x41
 80024e8:	2120      	movs	r1, #32
 80024ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	ffffefff 	.word	0xffffefff

08002508 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2241      	movs	r2, #65	; 0x41
 8002516:	5c9b      	ldrb	r3, [r3, r2]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	d139      	bne.n	8002592 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	5c9b      	ldrb	r3, [r3, r2]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002528:	2302      	movs	r3, #2
 800252a:	e033      	b.n	8002594 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	2101      	movs	r1, #1
 8002532:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2241      	movs	r2, #65	; 0x41
 8002538:	2124      	movs	r1, #36	; 0x24
 800253a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	438a      	bics	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a11      	ldr	r2, [pc, #68]	; (800259c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2241      	movs	r2, #65	; 0x41
 8002582:	2120      	movs	r1, #32
 8002584:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
  }
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	fffff0ff 	.word	0xfffff0ff

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e301      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d100      	bne.n	80025be <HAL_RCC_OscConfig+0x1e>
 80025bc:	e08d      	b.n	80026da <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025be:	4bc3      	ldr	r3, [pc, #780]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	220c      	movs	r2, #12
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d00e      	beq.n	80025e8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ca:	4bc0      	ldr	r3, [pc, #768]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	220c      	movs	r2, #12
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x64>
 80025d6:	4bbd      	ldr	r3, [pc, #756]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	025b      	lsls	r3, r3, #9
 80025de:	401a      	ands	r2, r3
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	025b      	lsls	r3, r3, #9
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d10d      	bne.n	8002604 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4bb8      	ldr	r3, [pc, #736]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	4013      	ands	r3, r2
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x56>
 80025f4:	e070      	b.n	80026d8 <HAL_RCC_OscConfig+0x138>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d000      	beq.n	8002600 <HAL_RCC_OscConfig+0x60>
 80025fe:	e06b      	b.n	80026d8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e2d8      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x7c>
 800260c:	4baf      	ldr	r3, [pc, #700]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4bae      	ldr	r3, [pc, #696]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	0249      	lsls	r1, r1, #9
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e02f      	b.n	800267c <HAL_RCC_OscConfig+0xdc>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10c      	bne.n	800263e <HAL_RCC_OscConfig+0x9e>
 8002624:	4ba9      	ldr	r3, [pc, #676]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4ba8      	ldr	r3, [pc, #672]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800262a:	49a9      	ldr	r1, [pc, #676]	; (80028d0 <HAL_RCC_OscConfig+0x330>)
 800262c:	400a      	ands	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	4ba6      	ldr	r3, [pc, #664]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4ba5      	ldr	r3, [pc, #660]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002636:	49a7      	ldr	r1, [pc, #668]	; (80028d4 <HAL_RCC_OscConfig+0x334>)
 8002638:	400a      	ands	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e01e      	b.n	800267c <HAL_RCC_OscConfig+0xdc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b05      	cmp	r3, #5
 8002644:	d10e      	bne.n	8002664 <HAL_RCC_OscConfig+0xc4>
 8002646:	4ba1      	ldr	r3, [pc, #644]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4ba0      	ldr	r3, [pc, #640]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	02c9      	lsls	r1, r1, #11
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	4b9d      	ldr	r3, [pc, #628]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b9c      	ldr	r3, [pc, #624]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	0249      	lsls	r1, r1, #9
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xdc>
 8002664:	4b99      	ldr	r3, [pc, #612]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b98      	ldr	r3, [pc, #608]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800266a:	4999      	ldr	r1, [pc, #612]	; (80028d0 <HAL_RCC_OscConfig+0x330>)
 800266c:	400a      	ands	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	4b96      	ldr	r3, [pc, #600]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b95      	ldr	r3, [pc, #596]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002676:	4997      	ldr	r1, [pc, #604]	; (80028d4 <HAL_RCC_OscConfig+0x334>)
 8002678:	400a      	ands	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d014      	beq.n	80026ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fa58 	bl	8000b38 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268e:	f7fe fa53 	bl	8000b38 <HAL_GetTick>
 8002692:	0002      	movs	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e28a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a0:	4b8a      	ldr	r3, [pc, #552]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	4013      	ands	r3, r2
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0xee>
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fa43 	bl	8000b38 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fa3e 	bl	8000b38 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e275      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	4b80      	ldr	r3, [pc, #512]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x118>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_OscConfig+0x146>
 80026e4:	e069      	b.n	80027ba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026e6:	4b79      	ldr	r3, [pc, #484]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	220c      	movs	r2, #12
 80026ec:	4013      	ands	r3, r2
 80026ee:	d00b      	beq.n	8002708 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026f0:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	220c      	movs	r2, #12
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d11c      	bne.n	8002736 <HAL_RCC_OscConfig+0x196>
 80026fc:	4b73      	ldr	r3, [pc, #460]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	025b      	lsls	r3, r3, #9
 8002704:	4013      	ands	r3, r2
 8002706:	d116      	bne.n	8002736 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002708:	4b70      	ldr	r3, [pc, #448]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x17e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e24b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	22f8      	movs	r2, #248	; 0xf8
 8002724:	4393      	bics	r3, r2
 8002726:	0019      	movs	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	00da      	lsls	r2, r3, #3
 800272e:	4b67      	ldr	r3, [pc, #412]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002734:	e041      	b.n	80027ba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d024      	beq.n	8002788 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002744:	2101      	movs	r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe f9f5 	bl	8000b38 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002754:	f7fe f9f0 	bl	8000b38 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e227      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002766:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	d0f1      	beq.n	8002754 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b56      	ldr	r3, [pc, #344]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	22f8      	movs	r2, #248	; 0xf8
 8002776:	4393      	bics	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00da      	lsls	r2, r3, #3
 8002780:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e018      	b.n	80027ba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b4f      	ldr	r3, [pc, #316]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800278e:	2101      	movs	r1, #1
 8002790:	438a      	bics	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe f9d0 	bl	8000b38 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe f9cb 	bl	8000b38 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e202      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2202      	movs	r2, #2
 80027b6:	4013      	ands	r3, r2
 80027b8:	d1f1      	bne.n	800279e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2208      	movs	r2, #8
 80027c0:	4013      	ands	r3, r2
 80027c2:	d036      	beq.n	8002832 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d019      	beq.n	8002800 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027cc:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d0:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	430a      	orrs	r2, r1
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7fe f9ae 	bl	8000b38 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e2:	f7fe f9a9 	bl	8000b38 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1e0      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d0f1      	beq.n	80027e2 <HAL_RCC_OscConfig+0x242>
 80027fe:	e018      	b.n	8002832 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002806:	2101      	movs	r1, #1
 8002808:	438a      	bics	r2, r1
 800280a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280c:	f7fe f994 	bl	8000b38 <HAL_GetTick>
 8002810:	0003      	movs	r3, r0
 8002812:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002816:	f7fe f98f 	bl	8000b38 <HAL_GetTick>
 800281a:	0002      	movs	r2, r0
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e1c6      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2202      	movs	r2, #2
 800282e:	4013      	ands	r3, r2
 8002830:	d1f1      	bne.n	8002816 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2204      	movs	r2, #4
 8002838:	4013      	ands	r3, r2
 800283a:	d100      	bne.n	800283e <HAL_RCC_OscConfig+0x29e>
 800283c:	e0b4      	b.n	80029a8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	201f      	movs	r0, #31
 8002840:	183b      	adds	r3, r7, r0
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	055b      	lsls	r3, r3, #21
 800284e:	4013      	ands	r3, r2
 8002850:	d110      	bne.n	8002874 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	0549      	lsls	r1, r1, #21
 800285c:	430a      	orrs	r2, r1
 800285e:	61da      	str	r2, [r3, #28]
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	055b      	lsls	r3, r3, #21
 8002868:	4013      	ands	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800286e:	183b      	adds	r3, r7, r0
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <HAL_RCC_OscConfig+0x338>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4013      	ands	r3, r2
 800287e:	d11a      	bne.n	80028b6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_RCC_OscConfig+0x338>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_RCC_OscConfig+0x338>)
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7fe f953 	bl	8000b38 <HAL_GetTick>
 8002892:	0003      	movs	r3, r0
 8002894:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe f94e 	bl	8000b38 <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e185      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_OscConfig+0x338>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10e      	bne.n	80028dc <HAL_RCC_OscConfig+0x33c>
 80028be:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	4b02      	ldr	r3, [pc, #8]	; (80028cc <HAL_RCC_OscConfig+0x32c>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	430a      	orrs	r2, r1
 80028c8:	621a      	str	r2, [r3, #32]
 80028ca:	e035      	b.n	8002938 <HAL_RCC_OscConfig+0x398>
 80028cc:	40021000 	.word	0x40021000
 80028d0:	fffeffff 	.word	0xfffeffff
 80028d4:	fffbffff 	.word	0xfffbffff
 80028d8:	40007000 	.word	0x40007000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x35e>
 80028e4:	4bb6      	ldr	r3, [pc, #728]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	4bb5      	ldr	r3, [pc, #724]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	438a      	bics	r2, r1
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	4bb3      	ldr	r3, [pc, #716]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	4bb2      	ldr	r3, [pc, #712]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80028f6:	2104      	movs	r1, #4
 80028f8:	438a      	bics	r2, r1
 80028fa:	621a      	str	r2, [r3, #32]
 80028fc:	e01c      	b.n	8002938 <HAL_RCC_OscConfig+0x398>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b05      	cmp	r3, #5
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0x380>
 8002906:	4bae      	ldr	r3, [pc, #696]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002908:	6a1a      	ldr	r2, [r3, #32]
 800290a:	4bad      	ldr	r3, [pc, #692]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 800290c:	2104      	movs	r1, #4
 800290e:	430a      	orrs	r2, r1
 8002910:	621a      	str	r2, [r3, #32]
 8002912:	4bab      	ldr	r3, [pc, #684]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002914:	6a1a      	ldr	r2, [r3, #32]
 8002916:	4baa      	ldr	r3, [pc, #680]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002918:	2101      	movs	r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	621a      	str	r2, [r3, #32]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0x398>
 8002920:	4ba7      	ldr	r3, [pc, #668]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	4ba6      	ldr	r3, [pc, #664]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002926:	2101      	movs	r1, #1
 8002928:	438a      	bics	r2, r1
 800292a:	621a      	str	r2, [r3, #32]
 800292c:	4ba4      	ldr	r3, [pc, #656]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	4ba3      	ldr	r3, [pc, #652]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002932:	2104      	movs	r1, #4
 8002934:	438a      	bics	r2, r1
 8002936:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d014      	beq.n	800296a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7fe f8fa 	bl	8000b38 <HAL_GetTick>
 8002944:	0003      	movs	r3, r0
 8002946:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	e009      	b.n	800295e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe f8f5 	bl	8000b38 <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	4a9b      	ldr	r2, [pc, #620]	; (8002bc4 <HAL_RCC_OscConfig+0x624>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e12b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295e:	4b98      	ldr	r3, [pc, #608]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x3aa>
 8002968:	e013      	b.n	8002992 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe f8e5 	bl	8000b38 <HAL_GetTick>
 800296e:	0003      	movs	r3, r0
 8002970:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002972:	e009      	b.n	8002988 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe f8e0 	bl	8000b38 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	4a91      	ldr	r2, [pc, #580]	; (8002bc4 <HAL_RCC_OscConfig+0x624>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e116      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	4b8d      	ldr	r3, [pc, #564]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002992:	231f      	movs	r3, #31
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299c:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	4b87      	ldr	r3, [pc, #540]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80029a2:	4989      	ldr	r1, [pc, #548]	; (8002bc8 <HAL_RCC_OscConfig+0x628>)
 80029a4:	400a      	ands	r2, r1
 80029a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2210      	movs	r2, #16
 80029ae:	4013      	ands	r3, r2
 80029b0:	d063      	beq.n	8002a7a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d12a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029ba:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	4b80      	ldr	r3, [pc, #512]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80029c0:	2104      	movs	r1, #4
 80029c2:	430a      	orrs	r2, r1
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029c6:	4b7e      	ldr	r3, [pc, #504]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80029c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ca:	4b7d      	ldr	r3, [pc, #500]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7fe f8b1 	bl	8000b38 <HAL_GetTick>
 80029d6:	0003      	movs	r3, r0
 80029d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029dc:	f7fe f8ac 	bl	8000b38 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0e3      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029ee:	4b74      	ldr	r3, [pc, #464]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	2202      	movs	r2, #2
 80029f4:	4013      	ands	r3, r2
 80029f6:	d0f1      	beq.n	80029dc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029f8:	4b71      	ldr	r3, [pc, #452]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	22f8      	movs	r2, #248	; 0xf8
 80029fe:	4393      	bics	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	00da      	lsls	r2, r3, #3
 8002a08:	4b6d      	ldr	r3, [pc, #436]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0e:	e034      	b.n	8002a7a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	3305      	adds	r3, #5
 8002a16:	d111      	bne.n	8002a3c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a18:	4b69      	ldr	r3, [pc, #420]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1c:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a1e:	2104      	movs	r1, #4
 8002a20:	438a      	bics	r2, r1
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a24:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	22f8      	movs	r2, #248	; 0xf8
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	00da      	lsls	r2, r3, #3
 8002a34:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a36:	430a      	orrs	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34
 8002a3a:	e01e      	b.n	8002a7a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a3c:	4b60      	ldr	r3, [pc, #384]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	4b5f      	ldr	r3, [pc, #380]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a42:	2104      	movs	r1, #4
 8002a44:	430a      	orrs	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a48:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4c:	4b5c      	ldr	r3, [pc, #368]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	438a      	bics	r2, r1
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe f870 	bl	8000b38 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a5e:	f7fe f86b 	bl	8000b38 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0a2      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a74:	2202      	movs	r2, #2
 8002a76:	4013      	ands	r3, r2
 8002a78:	d1f1      	bne.n	8002a5e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d100      	bne.n	8002a84 <HAL_RCC_OscConfig+0x4e4>
 8002a82:	e097      	b.n	8002bb4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a84:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	220c      	movs	r2, #12
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d100      	bne.n	8002a92 <HAL_RCC_OscConfig+0x4f2>
 8002a90:	e06b      	b.n	8002b6a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d14c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002aa0:	494a      	ldr	r1, [pc, #296]	; (8002bcc <HAL_RCC_OscConfig+0x62c>)
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe f847 	bl	8000b38 <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe f842 	bl	8000b38 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e079      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	049b      	lsls	r3, r3, #18
 8002aca:	4013      	ands	r3, r2
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ace:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	4393      	bics	r3, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <HAL_RCC_OscConfig+0x630>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	431a      	orrs	r2, r3
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afc:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0449      	lsls	r1, r1, #17
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fe f815 	bl	8000b38 <HAL_GetTick>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe f810 	bl	8000b38 <HAL_GetTick>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e047      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	049b      	lsls	r3, r3, #18
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x574>
 8002b32:	e03f      	b.n	8002bb4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b34:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002b3a:	4924      	ldr	r1, [pc, #144]	; (8002bcc <HAL_RCC_OscConfig+0x62c>)
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fd fffa 	bl	8000b38 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fd fff5 	bl	8000b38 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e02c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	049b      	lsls	r3, r3, #18
 8002b64:	4013      	ands	r3, r2
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x5aa>
 8002b68:	e024      	b.n	8002bb4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e01f      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	025b      	lsls	r3, r3, #9
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10e      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	220f      	movs	r2, #15
 8002b96:	401a      	ands	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	23f0      	movs	r3, #240	; 0xf0
 8002ba4:	039b      	lsls	r3, r3, #14
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b008      	add	sp, #32
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	00001388 	.word	0x00001388
 8002bc8:	efffffff 	.word	0xefffffff
 8002bcc:	feffffff 	.word	0xfeffffff
 8002bd0:	ffc2ffff 	.word	0xffc2ffff

08002bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0b3      	b.n	8002d50 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_RCC_ClockConfig+0x184>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2201      	movs	r2, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d911      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCC_ClockConfig+0x184>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4393      	bics	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <HAL_RCC_ClockConfig+0x184>)
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <HAL_RCC_ClockConfig+0x184>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e09a      	b.n	8002d50 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d015      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d006      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c2e:	4b4b      	ldr	r3, [pc, #300]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002c34:	21e0      	movs	r1, #224	; 0xe0
 8002c36:	00c9      	lsls	r1, r1, #3
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	22f0      	movs	r2, #240	; 0xf0
 8002c42:	4393      	bics	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	d040      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b3e      	ldr	r3, [pc, #248]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	029b      	lsls	r3, r3, #10
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d114      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06e      	b.n	8002d50 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	049b      	lsls	r3, r3, #18
 8002c82:	4013      	ands	r3, r2
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e062      	b.n	8002d50 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e05b      	b.n	8002d50 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	4393      	bics	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fd ff44 	bl	8000b38 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb4:	e009      	b.n	8002cca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb6:	f7fd ff3f 	bl	8000b38 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_RCC_ClockConfig+0x18c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e042      	b.n	8002d50 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	220c      	movs	r2, #12
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1ec      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_RCC_ClockConfig+0x184>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d211      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCC_ClockConfig+0x184>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_RCC_ClockConfig+0x184>)
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCC_ClockConfig+0x184>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e020      	b.n	8002d50 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2204      	movs	r2, #4
 8002d14:	4013      	ands	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_RCC_ClockConfig+0x190>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d2c:	f000 f820 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d30:	0001      	movs	r1, r0
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_RCC_ClockConfig+0x188>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	220f      	movs	r2, #15
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x194>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	000a      	movs	r2, r1
 8002d42:	40da      	lsrs	r2, r3
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x198>)
 8002d46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd feaf 	bl	8000aac <HAL_InitTick>
  
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b004      	add	sp, #16
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	00001388 	.word	0x00001388
 8002d64:	fffff8ff 	.word	0xfffff8ff
 8002d68:	0800371c 	.word	0x0800371c
 8002d6c:	200000dc 	.word	0x200000dc

08002d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b08f      	sub	sp, #60	; 0x3c
 8002d74:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d76:	2314      	movs	r3, #20
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d7e:	c313      	stmia	r3!, {r0, r1, r4}
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d8a:	c313      	stmia	r3!, {r0, r1, r4}
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d94:	2300      	movs	r3, #0
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	220c      	movs	r2, #12
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d002      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x4a>
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d003      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x50>
 8002db8:	e02d      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dbe:	e02d      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2214      	movs	r2, #20
 8002dca:	18ba      	adds	r2, r7, r2
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	1d3a      	adds	r2, r7, #4
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	4013      	ands	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dea:	4812      	ldr	r0, [pc, #72]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dec:	f7fd f994 	bl	8000118 <__udivsi3>
 8002df0:	0003      	movs	r3, r0
 8002df2:	001a      	movs	r2, r3
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	4353      	muls	r3, r2
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfa:	e009      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfe:	000a      	movs	r2, r1
 8002e00:	0152      	lsls	r2, r2, #5
 8002e02:	1a52      	subs	r2, r2, r1
 8002e04:	0193      	lsls	r3, r2, #6
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	185b      	adds	r3, r3, r1
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e14:	e002      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e1a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b00f      	add	sp, #60	; 0x3c
 8002e24:	bd90      	pop	{r4, r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	080036fc 	.word	0x080036fc
 8002e2c:	0800370c 	.word	0x0800370c
 8002e30:	40021000 	.word	0x40021000
 8002e34:	007a1200 	.word	0x007a1200

08002e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	200000dc 	.word	0x200000dc

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e50:	f7ff fff2 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e54:	0001      	movs	r1, r0
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	4013      	ands	r3, r2
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	40d9      	lsrs	r1, r3
 8002e66:	000b      	movs	r3, r1
}    
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	40021000 	.word	0x40021000
 8002e74:	0800372c 	.word	0x0800372c

08002e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e044      	b.n	8002f14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2274      	movs	r2, #116	; 0x74
 8002e96:	2100      	movs	r1, #0
 8002e98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7fd fd5f 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2224      	movs	r2, #36	; 0x24
 8002ea6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f8da 	bl	8003074 <UART_SetConfig>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e024      	b.n	8002f14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 fa0d 	bl	80032f4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	490d      	ldr	r1, [pc, #52]	; (8002f1c <HAL_UART_Init+0xa4>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	212a      	movs	r1, #42	; 0x2a
 8002ef6:	438a      	bics	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 faa5 	bl	800345c <UART_CheckIdleState>
 8002f12:	0003      	movs	r3, r0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	ffffb7ff 	.word	0xffffb7ff

08002f20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d000      	beq.n	8002f3a <HAL_UART_Transmit+0x1a>
 8002f38:	e096      	b.n	8003068 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_UART_Transmit+0x28>
 8002f40:	1dbb      	adds	r3, r7, #6
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e08e      	b.n	800306a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	015b      	lsls	r3, r3, #5
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d109      	bne.n	8002f6c <HAL_UART_Transmit+0x4c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2201      	movs	r2, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	d001      	beq.n	8002f6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e07e      	b.n	800306a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2274      	movs	r2, #116	; 0x74
 8002f70:	5c9b      	ldrb	r3, [r3, r2]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_UART_Transmit+0x5a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e077      	b.n	800306a <HAL_UART_Transmit+0x14a>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2274      	movs	r2, #116	; 0x74
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2280      	movs	r2, #128	; 0x80
 8002f86:	2100      	movs	r1, #0
 8002f88:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2221      	movs	r2, #33	; 0x21
 8002f8e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f90:	f7fd fdd2 	bl	8000b38 <HAL_GetTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1dba      	adds	r2, r7, #6
 8002f9c:	2150      	movs	r1, #80	; 0x50
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1dba      	adds	r2, r7, #6
 8002fa6:	2152      	movs	r1, #82	; 0x52
 8002fa8:	8812      	ldrh	r2, [r2, #0]
 8002faa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	015b      	lsls	r3, r3, #5
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d108      	bne.n	8002fca <HAL_UART_Transmit+0xaa>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e003      	b.n	8002fd2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2274      	movs	r2, #116	; 0x74
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002fda:	e02d      	b.n	8003038 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	f000 fa7f 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e039      	b.n	800306a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	05d2      	lsls	r2, r2, #23
 8003006:	0dd2      	lsrs	r2, r2, #23
 8003008:	b292      	uxth	r2, r2
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	3302      	adds	r3, #2
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e008      	b.n	8003026 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b292      	uxth	r2, r2
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	3301      	adds	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2252      	movs	r2, #82	; 0x52
 800302a:	5a9b      	ldrh	r3, [r3, r2]
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b299      	uxth	r1, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2252      	movs	r2, #82	; 0x52
 8003036:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2252      	movs	r2, #82	; 0x52
 800303c:	5a9b      	ldrh	r3, [r3, r2]
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1cb      	bne.n	8002fdc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	0013      	movs	r3, r2
 800304e:	2200      	movs	r2, #0
 8003050:	2140      	movs	r1, #64	; 0x40
 8003052:	f000 fa4b 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e005      	b.n	800306a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b008      	add	sp, #32
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800307c:	231e      	movs	r3, #30
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a8d      	ldr	r2, [pc, #564]	; (80032d8 <UART_SetConfig+0x264>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a88      	ldr	r2, [pc, #544]	; (80032dc <UART_SetConfig+0x268>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a7f      	ldr	r2, [pc, #508]	; (80032e0 <UART_SetConfig+0x26c>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a7b      	ldr	r2, [pc, #492]	; (80032e4 <UART_SetConfig+0x270>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d127      	bne.n	800314a <UART_SetConfig+0xd6>
 80030fa:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <UART_SetConfig+0x274>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	2203      	movs	r2, #3
 8003100:	4013      	ands	r3, r2
 8003102:	2b03      	cmp	r3, #3
 8003104:	d00d      	beq.n	8003122 <UART_SetConfig+0xae>
 8003106:	d81b      	bhi.n	8003140 <UART_SetConfig+0xcc>
 8003108:	2b02      	cmp	r3, #2
 800310a:	d014      	beq.n	8003136 <UART_SetConfig+0xc2>
 800310c:	d818      	bhi.n	8003140 <UART_SetConfig+0xcc>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <UART_SetConfig+0xa4>
 8003112:	2b01      	cmp	r3, #1
 8003114:	d00a      	beq.n	800312c <UART_SetConfig+0xb8>
 8003116:	e013      	b.n	8003140 <UART_SetConfig+0xcc>
 8003118:	231f      	movs	r3, #31
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e021      	b.n	8003166 <UART_SetConfig+0xf2>
 8003122:	231f      	movs	r3, #31
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2202      	movs	r2, #2
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e01c      	b.n	8003166 <UART_SetConfig+0xf2>
 800312c:	231f      	movs	r3, #31
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2204      	movs	r2, #4
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e017      	b.n	8003166 <UART_SetConfig+0xf2>
 8003136:	231f      	movs	r3, #31
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2208      	movs	r2, #8
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e012      	b.n	8003166 <UART_SetConfig+0xf2>
 8003140:	231f      	movs	r3, #31
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2210      	movs	r2, #16
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e00d      	b.n	8003166 <UART_SetConfig+0xf2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a67      	ldr	r2, [pc, #412]	; (80032ec <UART_SetConfig+0x278>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d104      	bne.n	800315e <UART_SetConfig+0xea>
 8003154:	231f      	movs	r3, #31
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e003      	b.n	8003166 <UART_SetConfig+0xf2>
 800315e:	231f      	movs	r3, #31
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	2210      	movs	r2, #16
 8003164:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	429a      	cmp	r2, r3
 8003170:	d15d      	bne.n	800322e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003172:	231f      	movs	r3, #31
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d015      	beq.n	80031a8 <UART_SetConfig+0x134>
 800317c:	dc18      	bgt.n	80031b0 <UART_SetConfig+0x13c>
 800317e:	2b04      	cmp	r3, #4
 8003180:	d00d      	beq.n	800319e <UART_SetConfig+0x12a>
 8003182:	dc15      	bgt.n	80031b0 <UART_SetConfig+0x13c>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <UART_SetConfig+0x11a>
 8003188:	2b02      	cmp	r3, #2
 800318a:	d005      	beq.n	8003198 <UART_SetConfig+0x124>
 800318c:	e010      	b.n	80031b0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318e:	f7ff fe5d 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8003192:	0003      	movs	r3, r0
 8003194:	61bb      	str	r3, [r7, #24]
        break;
 8003196:	e012      	b.n	80031be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <UART_SetConfig+0x27c>)
 800319a:	61bb      	str	r3, [r7, #24]
        break;
 800319c:	e00f      	b.n	80031be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7ff fde7 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 80031a2:	0003      	movs	r3, r0
 80031a4:	61bb      	str	r3, [r7, #24]
        break;
 80031a6:	e00a      	b.n	80031be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	61bb      	str	r3, [r7, #24]
        break;
 80031ae:	e006      	b.n	80031be <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b4:	231e      	movs	r3, #30
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
        break;
 80031bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d100      	bne.n	80031c6 <UART_SetConfig+0x152>
 80031c4:	e07b      	b.n	80032be <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	005a      	lsls	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	18d2      	adds	r2, r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0019      	movs	r1, r3
 80031d8:	0010      	movs	r0, r2
 80031da:	f7fc ff9d 	bl	8000118 <__udivsi3>
 80031de:	0003      	movs	r3, r0
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	d91c      	bls.n	8003224 <UART_SetConfig+0x1b0>
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	025b      	lsls	r3, r3, #9
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d217      	bcs.n	8003224 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	200e      	movs	r0, #14
 80031fa:	183b      	adds	r3, r7, r0
 80031fc:	210f      	movs	r1, #15
 80031fe:	438a      	bics	r2, r1
 8003200:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	b29b      	uxth	r3, r3
 8003208:	2207      	movs	r2, #7
 800320a:	4013      	ands	r3, r2
 800320c:	b299      	uxth	r1, r3
 800320e:	183b      	adds	r3, r7, r0
 8003210:	183a      	adds	r2, r7, r0
 8003212:	8812      	ldrh	r2, [r2, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	183a      	adds	r2, r7, r0
 800321e:	8812      	ldrh	r2, [r2, #0]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	e04c      	b.n	80032be <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003224:	231e      	movs	r3, #30
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e047      	b.n	80032be <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800322e:	231f      	movs	r3, #31
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d015      	beq.n	8003264 <UART_SetConfig+0x1f0>
 8003238:	dc18      	bgt.n	800326c <UART_SetConfig+0x1f8>
 800323a:	2b04      	cmp	r3, #4
 800323c:	d00d      	beq.n	800325a <UART_SetConfig+0x1e6>
 800323e:	dc15      	bgt.n	800326c <UART_SetConfig+0x1f8>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <UART_SetConfig+0x1d6>
 8003244:	2b02      	cmp	r3, #2
 8003246:	d005      	beq.n	8003254 <UART_SetConfig+0x1e0>
 8003248:	e010      	b.n	800326c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324a:	f7ff fdff 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 800324e:	0003      	movs	r3, r0
 8003250:	61bb      	str	r3, [r7, #24]
        break;
 8003252:	e012      	b.n	800327a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <UART_SetConfig+0x27c>)
 8003256:	61bb      	str	r3, [r7, #24]
        break;
 8003258:	e00f      	b.n	800327a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7ff fd89 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 800325e:	0003      	movs	r3, r0
 8003260:	61bb      	str	r3, [r7, #24]
        break;
 8003262:	e00a      	b.n	800327a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	61bb      	str	r3, [r7, #24]
        break;
 800326a:	e006      	b.n	800327a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003270:	231e      	movs	r3, #30
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
        break;
 8003278:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01e      	beq.n	80032be <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	085a      	lsrs	r2, r3, #1
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	18d2      	adds	r2, r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	0019      	movs	r1, r3
 8003290:	0010      	movs	r0, r2
 8003292:	f7fc ff41 	bl	8000118 <__udivsi3>
 8003296:	0003      	movs	r3, r0
 8003298:	b29b      	uxth	r3, r3
 800329a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	d909      	bls.n	80032b6 <UART_SetConfig+0x242>
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	025b      	lsls	r3, r3, #9
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d204      	bcs.n	80032b6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	e003      	b.n	80032be <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80032b6:	231e      	movs	r3, #30
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032ca:	231e      	movs	r3, #30
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	781b      	ldrb	r3, [r3, #0]
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b008      	add	sp, #32
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	ffff69f3 	.word	0xffff69f3
 80032dc:	ffffcfff 	.word	0xffffcfff
 80032e0:	fffff4ff 	.word	0xfffff4ff
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40004400 	.word	0x40004400
 80032f0:	007a1200 	.word	0x007a1200

080032f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	2201      	movs	r2, #1
 8003302:	4013      	ands	r3, r2
 8003304:	d00b      	beq.n	800331e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4a4a      	ldr	r2, [pc, #296]	; (8003438 <UART_AdvFeatureConfig+0x144>)
 800330e:	4013      	ands	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	2202      	movs	r2, #2
 8003324:	4013      	ands	r3, r2
 8003326:	d00b      	beq.n	8003340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4a43      	ldr	r2, [pc, #268]	; (800343c <UART_AdvFeatureConfig+0x148>)
 8003330:	4013      	ands	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	2204      	movs	r2, #4
 8003346:	4013      	ands	r3, r2
 8003348:	d00b      	beq.n	8003362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a3b      	ldr	r2, [pc, #236]	; (8003440 <UART_AdvFeatureConfig+0x14c>)
 8003352:	4013      	ands	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2208      	movs	r2, #8
 8003368:	4013      	ands	r3, r2
 800336a:	d00b      	beq.n	8003384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <UART_AdvFeatureConfig+0x150>)
 8003374:	4013      	ands	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2210      	movs	r2, #16
 800338a:	4013      	ands	r3, r2
 800338c:	d00b      	beq.n	80033a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a2c      	ldr	r2, [pc, #176]	; (8003448 <UART_AdvFeatureConfig+0x154>)
 8003396:	4013      	ands	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2220      	movs	r2, #32
 80033ac:	4013      	ands	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	4a25      	ldr	r2, [pc, #148]	; (800344c <UART_AdvFeatureConfig+0x158>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	0019      	movs	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	2240      	movs	r2, #64	; 0x40
 80033ce:	4013      	ands	r3, r2
 80033d0:	d01d      	beq.n	800340e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <UART_AdvFeatureConfig+0x15c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	035b      	lsls	r3, r3, #13
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10b      	bne.n	800340e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a15      	ldr	r2, [pc, #84]	; (8003454 <UART_AdvFeatureConfig+0x160>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	4013      	ands	r3, r2
 8003416:	d00b      	beq.n	8003430 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <UART_AdvFeatureConfig+0x164>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  }
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	fffdffff 	.word	0xfffdffff
 800343c:	fffeffff 	.word	0xfffeffff
 8003440:	fffbffff 	.word	0xfffbffff
 8003444:	ffff7fff 	.word	0xffff7fff
 8003448:	ffffefff 	.word	0xffffefff
 800344c:	ffffdfff 	.word	0xffffdfff
 8003450:	ffefffff 	.word	0xffefffff
 8003454:	ff9fffff 	.word	0xff9fffff
 8003458:	fff7ffff 	.word	0xfff7ffff

0800345c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af02      	add	r7, sp, #8
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	2100      	movs	r1, #0
 800346a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800346c:	f7fd fb64 	bl	8000b38 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2208      	movs	r2, #8
 800347c:	4013      	ands	r3, r2
 800347e:	2b08      	cmp	r3, #8
 8003480:	d10c      	bne.n	800349c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2280      	movs	r2, #128	; 0x80
 8003486:	0391      	lsls	r1, r2, #14
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <UART_CheckIdleState+0x8c>)
 800348c:	9200      	str	r2, [sp, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	f000 f82c 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d001      	beq.n	800349c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e021      	b.n	80034e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2204      	movs	r2, #4
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d10c      	bne.n	80034c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	03d1      	lsls	r1, r2, #15
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <UART_CheckIdleState+0x8c>)
 80034b4:	9200      	str	r2, [sp, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f000 f818 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d001      	beq.n	80034c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e00d      	b.n	80034e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2274      	movs	r2, #116	; 0x74
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b004      	add	sp, #16
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	01ffffff 	.word	0x01ffffff

080034ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b094      	sub	sp, #80	; 0x50
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fc:	e0a3      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003500:	3301      	adds	r3, #1
 8003502:	d100      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003504:	e09f      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fd fb17 	bl	8000b38 <HAL_GetTick>
 800350a:	0002      	movs	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <UART_WaitOnFlagUntilTimeout+0x30>
 8003516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003518:	2b00      	cmp	r3, #0
 800351a:	d13d      	bne.n	8003598 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351c:	f3ef 8310 	mrs	r3, PRIMASK
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003524:	647b      	str	r3, [r7, #68]	; 0x44
 8003526:	2301      	movs	r3, #1
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	f383 8810 	msr	PRIMASK, r3
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	494c      	ldr	r1, [pc, #304]	; (8003670 <UART_WaitOnFlagUntilTimeout+0x184>)
 800353e:	400a      	ands	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	f383 8810 	msr	PRIMASK, r3
}
 800354c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354e:	f3ef 8310 	mrs	r3, PRIMASK
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
 8003558:	2301      	movs	r3, #1
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2101      	movs	r1, #1
 8003570:	438a      	bics	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	f383 8810 	msr	PRIMASK, r3
}
 800357e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2274      	movs	r2, #116	; 0x74
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e067      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2204      	movs	r2, #4
 80035a0:	4013      	ands	r3, r2
 80035a2:	d050      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	401a      	ands	r2, r3
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d146      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c2:	f3ef 8310 	mrs	r3, PRIMASK
 80035c6:	613b      	str	r3, [r7, #16]
  return(result);
 80035c8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	2301      	movs	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4923      	ldr	r1, [pc, #140]	; (8003670 <UART_WaitOnFlagUntilTimeout+0x184>)
 80035e4:	400a      	ands	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f383 8810 	msr	PRIMASK, r3
}
 80035f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f4:	f3ef 8310 	mrs	r3, PRIMASK
 80035f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80035fa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80035fe:	2301      	movs	r3, #1
 8003600:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f383 8810 	msr	PRIMASK, r3
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2101      	movs	r1, #1
 8003616:	438a      	bics	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	2120      	movs	r1, #32
 8003638:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2274      	movs	r2, #116	; 0x74
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e010      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	425a      	negs	r2, r3
 8003656:	4153      	adcs	r3, r2
 8003658:	b2db      	uxtb	r3, r3
 800365a:	001a      	movs	r2, r3
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d100      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003664:	e74b      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b014      	add	sp, #80	; 0x50
 800366e:	bd80      	pop	{r7, pc}
 8003670:	fffffe5f 	.word	0xfffffe5f

08003674 <__libc_init_array>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	2600      	movs	r6, #0
 8003678:	4d0c      	ldr	r5, [pc, #48]	; (80036ac <__libc_init_array+0x38>)
 800367a:	4c0d      	ldr	r4, [pc, #52]	; (80036b0 <__libc_init_array+0x3c>)
 800367c:	1b64      	subs	r4, r4, r5
 800367e:	10a4      	asrs	r4, r4, #2
 8003680:	42a6      	cmp	r6, r4
 8003682:	d109      	bne.n	8003698 <__libc_init_array+0x24>
 8003684:	2600      	movs	r6, #0
 8003686:	f000 f821 	bl	80036cc <_init>
 800368a:	4d0a      	ldr	r5, [pc, #40]	; (80036b4 <__libc_init_array+0x40>)
 800368c:	4c0a      	ldr	r4, [pc, #40]	; (80036b8 <__libc_init_array+0x44>)
 800368e:	1b64      	subs	r4, r4, r5
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	42a6      	cmp	r6, r4
 8003694:	d105      	bne.n	80036a2 <__libc_init_array+0x2e>
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	00b3      	lsls	r3, r6, #2
 800369a:	58eb      	ldr	r3, [r5, r3]
 800369c:	4798      	blx	r3
 800369e:	3601      	adds	r6, #1
 80036a0:	e7ee      	b.n	8003680 <__libc_init_array+0xc>
 80036a2:	00b3      	lsls	r3, r6, #2
 80036a4:	58eb      	ldr	r3, [r5, r3]
 80036a6:	4798      	blx	r3
 80036a8:	3601      	adds	r6, #1
 80036aa:	e7f2      	b.n	8003692 <__libc_init_array+0x1e>
 80036ac:	08003734 	.word	0x08003734
 80036b0:	08003734 	.word	0x08003734
 80036b4:	08003734 	.word	0x08003734
 80036b8:	08003738 	.word	0x08003738

080036bc <memset>:
 80036bc:	0003      	movs	r3, r0
 80036be:	1882      	adds	r2, r0, r2
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	7019      	strb	r1, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <_init>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr

080036d8 <_fini>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr
